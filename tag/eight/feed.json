{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunyuzero-Blog • All posts by \"eight\" tag",
    "description": "",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "url": "http://yoursite.com/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "title": "线性表",
            "date_published": "2020-09-11T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 线性表学习 </font></center>\n# 顺序表\n## 定义\n顺序表，即线性表的顺序存储结构，采用结构体类型SqList表示为：\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sqList</span>&#123;</span></span><br><span class=\"line\">    ElementType data[maxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n## 顺序表的实现\n### 建立顺序表\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqList *L=(sqList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(sqList));</span><br><span class=\"line\">L-&gt;length=<span class=\"number\">0</span>;<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;L-&gt;data[i]);    </span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n### 查找顺序表数据位置\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(sqList* L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length&amp;&amp;L-&gt;data[i]！=e)</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;L-length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n### 插入数据元素\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sert</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=L-&gt;length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&gt;i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        L-&gt;data[j]=L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;data[i<span class=\"number\">-1</span>]=e;</span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n### 删除顺序表\nfree(L);\n## 顺序表的应用\n### 题目大意\n给定一个顺序表，删除其中所有值等于x的元素，要求时间复杂度O(N),空间复杂度O(1)\n### 代码\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteX</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L-&gt;data[i]==x) i++;</span><br><span class=\"line\">        L-&gt;data[k]=L-&gt;data[i];</span><br><span class=\"line\">        k++;i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;length=k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L-&gt;length;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,L-&gt;data[i]);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n#链表\n## 定义\n链表，即线性表的链式存储结构，采用结构体的表示方式为：\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nodeList</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    nodeList *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n## 链表的实现\n### 链表的建立\n1.头插法\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *p,*q;</span><br><span class=\"line\">p=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    q-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n2.尾插法\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *head,*p,*q;</span><br><span class=\"line\">head=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p=head;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">    p=q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n### 链表的插入元素与删除元素\n1.插入元素\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sertElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *p=L;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;i&amp;&amp;p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nodeList *s=(nodeList*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">        s-&gt;data=e;</span><br><span class=\"line\">        s-&gt;next=p-&gt;next;</span><br><span class=\"line\">        p-&gt;next=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n2.删除元素\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nodeList *p=L,*q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;p-&gt;data!=e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n### 链表的删除\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeList</span><span class=\"params\">(nodeList *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q=L,*p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=q-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n## 链表的应用\n### 题目大意\n给定一个链表，设计一个算法使其元素递增。\n### 代码\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortList</span><span class=\"params\">(nodeList *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q,*p,*s;</span><br><span class=\"line\">    q=head-&gt;next;p=head-&gt;next-&gt;next;</span><br><span class=\"line\">    s=head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q-&gt;data&gt;=p-&gt;data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q-&gt;next=p-&gt;next;p-&gt;next=q;</span><br><span class=\"line\">        p=head-&gt;next;</span><br><span class=\"line\">        q=q-&gt;next</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习经验",
                "EIGHT"
            ]
        }
    ]
}