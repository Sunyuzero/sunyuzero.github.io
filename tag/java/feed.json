{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunyuzero-Blog • All posts by \"java\" tag",
    "description": "",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/10/02/java%E7%AC%94%E8%AE%B0(%E4%BA%8C)/",
            "url": "http://yoursite.com/2020/10/02/java%E7%AC%94%E8%AE%B0(%E4%BA%8C)/",
            "title": "java学习笔记（二）",
            "date_published": "2020-10-01T17:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java基本语法 </font></center>\n# jshell的使用\njshell是java的交互式运行环境，类似于python的命令行的交互式运行环境，直接在命令提示符中输入jshell进入Java交互环境，之后直接输入一条java语句，便能直接输出语句结果，注意jshell中的语句不用以分号结尾。\n\n<h1 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h1><h2 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h2><p>在Java程序中，如果要根据条件来决定是否执行某一段代码，就需要if语句。if语句的基本语法是：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//形式1</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (条件) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件满足时执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//形式2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件满足时执行</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 若if条件不满足执行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//形式3</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(条件<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件1满足时执行</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(条件<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 条件2满足时执行</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//条件1和2都不满足时执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据if的计算结果（true还是false），JVM决定是否执行if语句块（即花括号{}包含的所有语句）。</p>\n<h2 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h2><p>除了if语句外，还有一种条件判断，是根据某个表达式的结果，分别去执行不同的分支。switch语句根据switch (表达式)计算的结果，跳转到匹配的case结果，然后继续执行后续语句，直到遇到break结束执行。switch语句的基本语法是：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=1时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=2时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=3时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option都不符合时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h1><p>循环语句就是让计算机根据条件做循环计算，在条件满足时继续循环，条件不满足时退出循环。</p>\n<h2 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h2><p>while循环在每次循环开始前，首先判断条件是否成立。如果计算结果为true，就把循环体内的语句执行一遍，如果计算结果为false，那就直接跳到while循环的末尾，继续往下执行。其基本结构为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (条件表达式) &#123;</span><br><span class=\"line\">    循环语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"do-while循环\"><a href=\"#do-while循环\" class=\"headerlink\" title=\"do while循环\"></a>do while循环</h2><p>与while循环不同，do while循环则是先执行循环，再判断条件，条件满足时继续循环，条件不满足时退出。它的用法是：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    执行循环语句</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (条件表达式);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p>for循环是我们最常用的一种循环，它使用计数器实现循环。for循环会先初始化计数器，然后，在每次循环前检测循环条件，在每次循环后更新计数器。for循环的用法是：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (初始条件; 循环检测条件; 循环后更新计数器) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"for-each循环\"><a href=\"#for-each循环\" class=\"headerlink\" title=\"for each循环\"></a>for each循环</h2><p>Java还提供了一种for each循环，它可以更简单地遍历数组，和for循环相比，for each循环的变量n不再是计数器，而是直接对应到数组的每个元素。但是，for each循环无法指定遍历顺序，也无法获取数组的索引。它的用法如下所示：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] ns = &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : ns) &#123;</span><br><span class=\"line\">   System.out.println(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"break和continue\"><a href=\"#break和continue\" class=\"headerlink\" title=\"break和continue\"></a>break和continue</h2><h2 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h2><p>在循环过程中，可以使用break语句跳出当前循环，break会跳出当前循环，当有多个嵌套的循环时，break只能跳出最内层的循环，然后剩下的循环都不会执行了。</p>\n<h2 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h2><p>continue是提前结束本次循环，直接继续执行下次循环,在多层嵌套的循环中，continue语句同样是结束本次自己所在的循环。比如算从1-100的奇数的和时用continue就会很方便：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&amp;==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    sun+=i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>定义一个数组类型的变量，使用数组类型“类型[]”，例如:</p>\n<ul>\n<li>int[] a={1,2,3,4,5};    //根据{}之间的元素个数自动创建</li>\n<li>int[] a=new int{1,2,3,4,5}  //同上</li>\n<li>int[] a=new int[5];a={1,2,3,4,5};    //先创建容量为5的数组，再赋值<br>数组注意事项：</li>\n<li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；</li>\n<li>要访问数组中的某一个元素，需要使用索引。数组索引从0开始</li>\n<li>可以修改数组中的某一个元素，使用赋值语句</li>\n<li>可以用数组变量.length获取数组大小</li>\n<li>数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错</li>\n</ul>\n<h2 id=\"数组的遍历\"><a href=\"#数组的遍历\" class=\"headerlink\" title=\"数组的遍历\"></a>数组的遍历</h2><p>由于java提供了获取数组长度的方法，所以对于数组的遍历非常方便</p>\n",
            "tags": [
                "blog",
                "java学习",
                "java"
            ]
        },
        {
            "id": "http://yoursite.com/2020/10/01/java%E7%AC%94%E8%AE%B0(%E4%B8%80)/",
            "url": "http://yoursite.com/2020/10/01/java%E7%AC%94%E8%AE%B0(%E4%B8%80)/",
            "title": "java学习笔记（一）",
            "date_published": "2020-10-01T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java基本概念 </font></center>\n\n<h2 id=\"JVM-JRE与JDK\"><a href=\"#JVM-JRE与JDK\" class=\"headerlink\" title=\"JVM,JRE与JDK\"></a>JVM,JRE与JDK</h2><p>java语言有一个非常显著的特征就是跨平台性，无论在什么操作系统上，java程序都能够运行，这就得益于java的JVM。</p>\n<ul>\n<li>JVM<br>&emsp;java虚拟机，简称JVM(java virtual machine），是运行java程序的假想计算机，是java程序的运行环境，我们编写的java代码，都运行在JVM上。<br>&emsp;JVM为什么能使java具有跨平台性呢？原因就在于每个操作系统都具有一个不同的JVM，这些JVM充当了java程序与操作系统之间的中介，java程序直接运行在JVM中，形成的字节码在转运到操作系统，使得java程序在不同平台不需要重新编译，具有跨平台性。<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java1.png\" width=600></div></li>\n<li>JRE与JDK<br>&emsp;JRE(Java Runtime Environment），是java程序运行时所需的环境，包括JVM和运行时所需要的核心类库，如果只需要运行java程序的话，那么只需要JRE即可。<br>&emsp;JDK(Java Development Kit），是java程序开发的工具包，包括JRE和开发人员使用的工具，如果需要开发java程序，那么就需要安装JDK了。<br>&emsp;这三者的关系是JDK&gt;JRE&gt;JVM，如下图所示<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java2.png\" width=600></div>\n\n</li>\n</ul>\n<h2 id=\"用cmd运行java程序\"><a href=\"#用cmd运行java程序\" class=\"headerlink\" title=\"用cmd运行java程序\"></a>用cmd运行java程序</h2><p>首先将cmd定位在java程序所在的文件夹中，然后依次使用javac命令和java命令，javac是对java程序进行编译成class字节码，java命令则是运行编译好的class文件，具体操作如下图所示，其中Test.java是我已经编写好的程序</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java3.png\" width=600></div>\n\n<h2 id=\"java程序的注释\"><a href=\"#java程序的注释\" class=\"headerlink\" title=\"java程序的注释\"></a>java程序的注释</h2><p>java程序的注释与c++类似，有2种注释方法：单行注释和多行注释<br>单行注释：//注释内容，//之后的内容将被计算机忽略<br>多行注释：/* 注释内容，/* */之间的内容将被计算机忽略，可以跨行 */ </p>\n<h2 id=\"java关键字和标识符的命名规范\"><a href=\"#java关键字和标识符的命名规范\" class=\"headerlink\" title=\"java关键字和标识符的命名规范\"></a>java关键字和标识符的命名规范</h2><p>&emsp;和c++语言类似，java也有预先定义的关键字，这些关键字都是全小写，都有特定含义，变量名和类名等都不能与关键字相同。java区分大小写，所以，命名时可以使用标识符的大写，但不建议。<br>&emsp;标识符就是我们自己定义的内容的名称，标识符可以包含英文字母，数字，美元符号$和下划线_,但标识符不能以数字开头<br>建议标识符的命名规范：</p>\n<ul>\n<li>类名规范：首字母大写，后面每个单词的首字母大写（大驼峰式）</li>\n<li>变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li>\n<li>方法名规范：同变量名</li>\n</ul>\n<h2 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h2><ul>\n<li><font face=\"黑体\" size=5>1.常量分为字符串常量，整数常量，浮点数常量，字符常量，布尔常量，空常量，用const修饰</font><br>字符串常量：String，以’\\0’结束，如”abc”,”123”,占n+1个字节，其中n为组成字符串的字符个数。<br>整数常量：short（2字节），int（4字节），long（8字节）<br>浮点数常量：float（4字节），double（8字节）<br>字符常量：char（1字节）<br>布尔常量：bool（1字节）<br>空常量：null（0字节）</li>\n<li><font face=\"黑体\" size=5>2.变量，即可以改变的常量，没有const修饰的常量，其类型与常量相同</font><br>变量的使用注意事项：</li>\n<li>如果创建多个变量，变量名不可以重复</li>\n<li>对于float和long类型，字母后缀的F和L不要去掉</li>\n<li>如果使用byte和short类型的变量，右侧的数据值不要超过左侧类型的范围</li>\n<li>一定要对变量赋值后才能使用</li>\n<li>变量使用不能超过作用域</li>\n</ul>\n<h2 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h2><ul>\n<li>自动类型转换，数据类型从小到大，将会自动发生类型转换。</li>\n<li>强制类型转换，当数据类型从大到小，则需要强制转换，不能自动完成,可能会发生精度损失<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自动转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> b=a;  <span class=\"comment\">//从int到long，自动转换</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> c=<span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> d=c;  <span class=\"comment\">//从float到double，自动转换</span></span><br><span class=\"line\"><span class=\"comment\">//强制转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">100L</span>; <span class=\"comment\">//会报错，int无法自动转换为long</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>)<span class=\"number\">100L</span>;  <span class=\"comment\">//正确，实现了强制转换</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> s=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">a=(<span class=\"keyword\">int</span>)s;   <span class=\"comment\">//正确，将字符串强制转化成int整数,将会输出a的ASCII码</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"ASCII码表\"><a href=\"#ASCII码表\" class=\"headerlink\" title=\"ASCII码表\"></a>ASCII码表</h2><p>ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）是基于拉丁字母的一套电脑编码系统标准，ASCII 码也叫基础ASCII码，使用7 位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java4.jpg\" width=600></div>\n\n\n",
            "tags": [
                "blog",
                "java学习",
                "java"
            ]
        }
    ]
}