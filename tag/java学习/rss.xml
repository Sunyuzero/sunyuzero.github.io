<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Sunyuzero-Blog • Posts by &#34;java学习&#34; tag</title>
        <link>http://yoursite.com</link>
        <description></description>
        <language>en| zh-CN | zh-TW</language>
        <pubDate>Sun, 18 Oct 2020 13:45:43 +0800</pubDate>
        <lastBuildDate>Sun, 18 Oct 2020 13:45:43 +0800</lastBuildDate>
        <category>blog</category>
        <category>心路历程</category>
        <category>学习经验</category>
        <category>比赛</category>
        <category>java学习</category>
        <category>java</category>
        <category>机器学习</category>
        <category>BFS</category>
        <category>数据结构</category>
        <category>DFS</category>
        <category>暴力枚举</category>
        <category>ONE</category>
        <category>算法</category>
        <item>
            <guid isPermalink="true">http://yoursite.com/2020/10/18/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</guid>
            <title>java学习笔记（二）</title>
            <link>http://yoursite.com/2020/10/18/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</link>
            <category>blog</category>
            <category>java学习</category>
            <category>java</category>
            <pubDate>Sun, 18 Oct 2020 13:45:43 +0800</pubDate>
            <description><![CDATA[ &lt;center&gt;&lt;font face=&#34;黑体&#34; size=8&gt; 接口&amp;&amp;正则表达式 &lt;/font&gt;&lt;/center&gt;

&lt;h1 id=&#34;接口&#34;&gt;&lt;a href=&#34;#接口&#34; class=&#34;headerlink&#34; title=&#34;接口&#34;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;h2 id=&#34;1-定义&#34;&gt;&lt;a href=&#34;#1-定义&#34; class=&#34;headerlink&#34; title=&#34;1.定义&#34;&gt;&lt;/a&gt;1.定义&lt;/h2&gt;&lt;p&gt;java单继承性原因：避免继承的多个类中有相同定义的方法名称导致二义性。&lt;br&gt;接口的存在是为了多实现，克服java单继承的缺点。而接口与类的区别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类中成员可分为public，private和proteced，而接口默认全为public&lt;/li&gt;
&lt;li&gt;类中的方法可以声明并定义，而接口的方法只能声明，注意，接口的静态方法也可以直接声明定义&lt;/li&gt;
&lt;li&gt;类中可以定义变量而接口只能定义常量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-接口的声明与实现&#34;&gt;&lt;a href=&#34;#2-接口的声明与实现&#34; class=&#34;headerlink&#34; title=&#34;2.接口的声明与实现&#34;&gt;&lt;/a&gt;2.接口的声明与实现&lt;/h2&gt;&lt;h3 id=&#34;1-接口的声明只需interface-示例如下：&#34;&gt;&lt;a href=&#34;#1-接口的声明只需interface-示例如下：&#34; class=&#34;headerlink&#34; title=&#34;1.接口的声明只需interface,示例如下：&#34;&gt;&lt;/a&gt;1.接口的声明只需interface,示例如下：&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt;  &lt;span class=&#34;title&#34;&gt;Printable&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; MAX=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//public final int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;//public abstract void add&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; x ,&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;span class=&#34;comment&#34;&gt;//public abstract float.. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;2-实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：&#34;&gt;&lt;a href=&#34;#2-实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：&#34; class=&#34;headerlink&#34; title=&#34;2.实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：&#34;&gt;&lt;/a&gt;2.实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class A implements interfaceA,interfaceB  //一个类多实现接口
class C implements interfaceA   //多个类实现同一个接口&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-接口变量做参数回调&#34;&gt;&lt;a href=&#34;#3-接口变量做参数回调&#34; class=&#34;headerlink&#34; title=&#34;3.接口变量做参数回调&#34;&gt;&lt;/a&gt;3.接口变量做参数回调&lt;/h3&gt;&lt;p&gt;1.首先声明接口，一个文件只能定义一个与文件名相同的接口：&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java10.png&#34; width=600&gt;&lt;/div&gt;
2.类实现接口：
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java11.png&#34; width=600&gt;&lt;/div&gt;

&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java12.png&#34; width=600&gt;&lt;/div&gt;
3.以接口对象作为参数
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java13.png&#34; width=600&gt;&lt;/div&gt;

&lt;p&gt;4.接口回调&lt;br&gt;形参为接口对象，实参为类实例，将类实例赋值给接口对象，通过回调实现函数的调用：&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java14.png&#34; width=600&gt;&lt;/div&gt;

&lt;h3 id=&#34;接口的默认方法&#34;&gt;&lt;a href=&#34;#接口的默认方法&#34; class=&#34;headerlink&#34; title=&#34;接口的默认方法&#34;&gt;&lt;/a&gt;接口的默认方法&lt;/h3&gt;&lt;p&gt;接口里可以声明默认方法，该方法可以在接口里直接实现，实现接口的类不需要对它进行重写：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;methodDefault&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        system.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;这是默认方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;接口的私有方法&#34;&gt;&lt;a href=&#34;#接口的私有方法&#34; class=&#34;headerlink&#34; title=&#34;接口的私有方法&#34;&gt;&lt;/a&gt;接口的私有方法&lt;/h3&gt;&lt;p&gt;接口的私有方法&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java21.jpg&#34; width=600&gt;&lt;/div&gt;

&lt;h2 id=&#34;3-接口的一些注意事项&#34;&gt;&lt;a href=&#34;#3-接口的一些注意事项&#34; class=&#34;headerlink&#34; title=&#34;3.接口的一些注意事项&#34;&gt;&lt;/a&gt;3.接口的一些注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;接口中定义的静态方法不能通过实现接口的类的对象调用，而只能通过接口名直接调用&lt;/li&gt;
&lt;li&gt;&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java15.jpg&#34; width=600&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;正则表达式&#34;&gt;&lt;a href=&#34;#正则表达式&#34; class=&#34;headerlink&#34; title=&#34;正则表达式&#34;&gt;&lt;/a&gt;正则表达式&lt;/h1&gt;&lt;p&gt;正则表达式，用于字符串的匹配，可以控制输入和输出，实现字符串的验证，查找和替换。&lt;/p&gt;
&lt;h2 id=&#34;常见的正则表达式&#34;&gt;&lt;a href=&#34;#常见的正则表达式&#34; class=&#34;headerlink&#34; title=&#34;常见的正则表达式&#34;&gt;&lt;/a&gt;常见的正则表达式&lt;/h2&gt;&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java16.png&#34; width=600&gt;&lt;/div&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java17.png&#34; width=600&gt;&lt;/div&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java18.png&#34; width=600&gt;&lt;/div&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java19.png&#34; width=600&gt;&lt;/div&gt;

&lt;h2 id=&#34;对一些正则表达式的理解&#34;&gt;&lt;a href=&#34;#对一些正则表达式的理解&#34; class=&#34;headerlink&#34; title=&#34;对一些正则表达式的理解&#34;&gt;&lt;/a&gt;对一些正则表达式的理解&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;限定符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1.在正则表达式的规则中，. 表示 匹配除换行符 \n 之外的任何单字符，&lt;em&gt;表示零次或多次,所以 .&lt;/em&gt; 表示匹配任意字符匹配次或多次。&lt;br&gt;2. .* 可以匹配空字符，即开始和结尾字符中间可以没有字符，而使用 .+ 则必须保证匹配的字符串中间含有非空字符。&lt;br&gt;3.{n}表示出现n次，{n,}表示至少出现n次。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;贪婪匹配和懒惰匹配&lt;br&gt;&amp;emsp;在正则表达式中，以？作为贪婪模式和懒惰模式的区别标志，例如：字符串为abaabc，懒惰模式使用“ a.*?b ”将会匹配从a开始b结束的最短字符，即ab；而贪婪模式“ a.*b ”，将会匹配从a开始b结束的最长字符串，即adaab。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;正则表达式的应用&#34;&gt;&lt;a href=&#34;#正则表达式的应用&#34; class=&#34;headerlink&#34; title=&#34;正则表达式的应用&#34;&gt;&lt;/a&gt;正则表达式的应用&lt;/h2&gt;&lt;p&gt;1.要使用java的正则表达式，则需要使用到java.util.regex.*包下的Pattern类和Matcher类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pattern类：pattern对象就相当于一个模具，是正则表达式的编译表示&lt;/li&gt;
&lt;li&gt;Matcher类：matcher对象将模具和原材料进行匹配，即对输入字符串进行解释和匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.捕获组&lt;br&gt;捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。&lt;br&gt;捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：((A)(B(C))),(A),(B(C)),(C)&lt;/p&gt;
&lt;h2 id=&#34;简单示例，判断字符串中是否包含特定字符串&#34;&gt;&lt;a href=&#34;#简单示例，判断字符串中是否包含特定字符串&#34; class=&#34;headerlink&#34; title=&#34;简单示例，判断字符串中是否包含特定字符串&#34;&gt;&lt;/a&gt;简单示例，判断字符串中是否包含特定字符串&lt;/h2&gt;&lt;p&gt;使用Pattern.matchs(pattern,string)来比较，返回boolean值,pattern为正则表达式，string为字符串 &lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.regex.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String pattern = &lt;span class=&#34;string&#34;&gt;&amp;quot;.*java.*&amp;quot;&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;//判断字符串中是否含有java&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String content = &lt;span class=&#34;string&#34;&gt;&amp;quot;java learning&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; isMatch = Pattern.matches(pattern,content);    &lt;span class=&#34;comment&#34;&gt;//返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;捕获组的应用：从给定字符串查找数字串&#34;&gt;&lt;a href=&#34;#捕获组的应用：从给定字符串查找数字串&#34; class=&#34;headerlink&#34; title=&#34;捕获组的应用：从给定字符串查找数字串&#34;&gt;&lt;/a&gt;捕获组的应用：从给定字符串查找数字串&lt;/h2&gt;&lt;p&gt;首先创建Pattern对象，然后通过pattern对象创建matcher对象，再使用matcher的group方法来对字符串分组&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.regex.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String pattern = &lt;span class=&#34;string&#34;&gt;&amp;quot;(\\D*)(\\d+)(.*)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String content = &lt;span class=&#34;string&#34;&gt;&amp;quot;java learning 2020&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Pattern p = Pattern.compile(pattern);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Matcher m = p.matcher(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (m.find( )) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(m.group(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;) ); &lt;span class=&#34;comment&#34;&gt;//java learning 2020&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(m.group(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) );  &lt;span class=&#34;comment&#34;&gt;//java learning&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(m.group(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) );  &lt;span class=&#34;comment&#34;&gt;//2020&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;NO MATCH&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;对身份证的格式检测并捕获出生日期&#34;&gt;&lt;a href=&#34;#对身份证的格式检测并捕获出生日期&#34; class=&#34;headerlink&#34; title=&#34;对身份证的格式检测并捕获出生日期&#34;&gt;&lt;/a&gt;对身份证的格式检测并捕获出生日期&lt;/h2&gt;&lt;p&gt;首先对于身份证格式的验证，目前考虑的是身份证的位数和出生日期，所以使用的正则表达式为：(\d{6}[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\d{3}[x])|\d{6}[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\d{4}&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.regex.*;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        testID_Card();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;testID_Card&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String[] ID = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;430422200110200048&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;43042220011025001x&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;1326465123123354222&amp;quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String regrex = &lt;span class=&#34;string&#34;&gt;&amp;quot;(\\d&amp;#123;6&amp;#125;[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\\d&amp;#123;3&amp;#125;[x])&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;span class=&#34;string&#34;&gt;&amp;quot;|\\d&amp;#123;6&amp;#125;[2][0][0-1][0-9][0-1][0-9][0-3][0-9]\\d&amp;#123;4&amp;#125;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//改进的正则表达式，限定了7-14位的出生日期，添加了身份证最后一位为x的可能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Pattern regular = Pattern.compile(regrex);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        StringBuilder sb = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; ID.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Matcher matcher = regular.matcher(ID[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sb.append(ID[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sb.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;  match : &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sb.append(matcher.matches());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(sb.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            sb.delete(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, sb.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(matcher.matches())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                GetBirthDay(ID[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;match false,and can not get birthday\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;GetBirthDay&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String ID)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String pattern1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;(\\d&amp;#123;6&amp;#125;)(\\d&amp;#123;8&amp;#125;)(.*)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Pattern BirthDayRegular = Pattern.compile(pattern1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        String pattern2 = &lt;span class=&#34;string&#34;&gt;&amp;quot;(\\d&amp;#123;4&amp;#125;)(\\d&amp;#123;2&amp;#125;)(\\d&amp;#123;2&amp;#125;)&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Pattern YearMonthDayRegular = Pattern.compile(pattern2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Matcher matcher1 = BirthDayRegular.matcher(ID);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (matcher1.matches()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            Matcher matcher2 = YearMonthDayRegular&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    .matcher(matcher1.group(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (matcher2.matches()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                StringBuilder sb = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;  出生日期为： &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.append(matcher2.group(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.append(matcher2.group(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.append(&lt;span class=&#34;string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.append(matcher2.group(&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                System.out.println(sb.toString()+&lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                sb.delete(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,sb.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h1 id=&#34;对象的一些注意事项&#34;&gt;&lt;a href=&#34;#对象的一些注意事项&#34; class=&#34;headerlink&#34; title=&#34;对象的一些注意事项&#34;&gt;&lt;/a&gt;对象的一些注意事项&lt;/h1&gt;&lt;p&gt;1.在创建一个对象，使用构造函数new一个对象时，先在堆区分配内存放置对象的成员变量，和成员方法的地址，在方法区放置方法的声明，当调用方法或者定义方法时，在栈区开辟内存存放。&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java19.png&#34; width=600&gt;&lt;/div&gt;
2.当2个对象使用同一个方法时，不会相互干扰，因为使用了new创建新空间，但是当一个对象直接赋值给另一个对象，那么这2个对象共用一个内存空间，本质上是一样的。
3.java支持匿名对象，即可以直接使用new Object().method；直接调用对象的方法，但是匿名对象只能使用一次，使用完了就找不到匿名对象的地址了。所以匿名对象一般被用于作为方法的实参。

&lt;h2 id=&#34;对象数组&#34;&gt;&lt;a href=&#34;#对象数组&#34; class=&#34;headerlink&#34; title=&#34;对象数组&#34;&gt;&lt;/a&gt;对象数组&lt;/h2&gt;&lt;p&gt;对象数组，就是为对象类型的数组，数组元素存放的是对象的地址值，使用方法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Person[] array = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person(&lt;span class=&#34;string&#34;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;);       &lt;span class=&#34;comment&#34;&gt;//地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person(&lt;span class=&#34;string&#34;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;);      &lt;span class=&#34;comment&#34;&gt;//地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;array[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Person(&lt;span class=&#34;string&#34;&gt;&amp;quot;marial&amp;quot;&lt;/span&gt;);    &lt;span class=&#34;comment&#34;&gt;//地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].getName());  &lt;span class=&#34;comment&#34;&gt;//将会打印Tom&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;ArrayList&#34;&gt;&lt;a href=&#34;#ArrayList&#34; class=&#34;headerlink&#34; title=&#34;ArrayList&#34;&gt;&lt;/a&gt;ArrayList&lt;/h1&gt;&lt;p&gt;ArrayList类似于动态数组，是java的一个封装类，可以实现长度的随意变化。&lt;/p&gt;
&lt;h2 id=&#34;ArrayList的使用&#34;&gt;&lt;a href=&#34;#ArrayList的使用&#34; class=&#34;headerlink&#34; title=&#34;ArrayList的使用&#34;&gt;&lt;/a&gt;ArrayList的使用&lt;/h2&gt;&lt;p&gt;1.声明ArrayList对象&lt;br&gt;首先要导入java.util.ArrayList的包&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ArrayList &amp;lt;String&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();  &lt;span class=&#34;comment&#34;&gt;//尖括号内是list的数据类型，要求为泛型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.ArrayList的增加和删除数据，查找数据&lt;br&gt;使用ArrayList类的add，remove和get方法可以实现数据的增删，查找&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//增加数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(list);   &lt;span class=&#34;comment&#34;&gt;//输出[Tom]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;jack&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.add(&lt;span class=&#34;string&#34;&gt;&amp;quot;james&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(list);   &lt;span class=&#34;comment&#34;&gt;//输出[Tom,jack,james]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//查找数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String name = list.get(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);    &lt;span class=&#34;comment&#34;&gt;//索引从0开始，name为james&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//删除数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.remove(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);    &lt;span class=&#34;comment&#34;&gt;//将会删除第三个元素，即删除james&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(list)   &lt;span class=&#34;comment&#34;&gt;//打印[Tom,jack]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.获取ArrayList的长度&lt;br&gt;使用size()方法可以返回List的长度&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; size = list.size(); &lt;span class=&#34;comment&#34;&gt;//size为2，因为前面删除了一个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.ArrayList的对象类型&lt;br&gt;ArrayList的泛型也支持自己写的类,假如我已经写好了Student类&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ArrayList &amp;lt;Student&amp;gt; list = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student one = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;stu1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student two = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Student(&lt;span class=&#34;string&#34;&gt;&amp;quot;stu2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.add(one);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list.add(two);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//使用list当中的对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Student s1 = list.get(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String name = s1.getName();  &lt;span class=&#34;comment&#34;&gt;//name为stu1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;ArrayList的注意事项&#34;&gt;&lt;a href=&#34;#ArrayList的注意事项&#34; class=&#34;headerlink&#34; title=&#34;ArrayList的注意事项&#34;&gt;&lt;/a&gt;ArrayList的注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;声明ArrayList时尖括号内必须为泛型，泛型只能为引用类型，而不能是基本数据类型如int之类的，所以想使用基本数据类型，必须使用基本数据类型对应的包装类&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java20.png&#34; width=600&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;直接输出ArrayList的对象将会输出ArrayList的内容，并有着中括号[]括起来，如果ArrayList为空，会直接输出[]&lt;/li&gt;
&lt;li&gt;list.add()方法有布尔返回值，添加成功返回true，失败返回false&lt;/li&gt;
&lt;li&gt;list.remove()方法也有返回值，将会返回被删除的元素的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;字符串&#34;&gt;&lt;a href=&#34;#字符串&#34; class=&#34;headerlink&#34; title=&#34;字符串&#34;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h2 id=&#34;字符串的3种创建方法&#34;&gt;&lt;a href=&#34;#字符串的3种创建方法&#34; class=&#34;headerlink&#34; title=&#34;字符串的3种创建方法&#34;&gt;&lt;/a&gt;字符串的3种创建方法&lt;/h2&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.&lt;/span&gt;直接创建&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str1 = &lt;span class=&#34;string&#34;&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;2.&lt;/span&gt;根据字符数组创建&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ch[]=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;A&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;B&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;C&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str2 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(ch);   &lt;span class=&#34;comment&#34;&gt;//str2=&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;3.&lt;/span&gt;根据字节数组创建&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;byte&lt;/span&gt; by[] = &amp;#123;&lt;span class=&#34;number&#34;&gt;97&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;98&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;99&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str3 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(by);   &lt;span class=&#34;comment&#34;&gt;//str3=&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;4.&lt;/span&gt;不赋值将创建空字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str4 = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String();   &lt;span class=&#34;comment&#34;&gt;//str4为空字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;字符串的一些方法&#34;&gt;&lt;a href=&#34;#字符串的一些方法&#34; class=&#34;headerlink&#34; title=&#34;字符串的一些方法&#34;&gt;&lt;/a&gt;字符串的一些方法&lt;/h2&gt;&lt;p&gt;1.equals(String str)方法&lt;br&gt;使用equals方法将会比较字符串的内容，不会比较地址&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str1=&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ch[]=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;h&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;e&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str2=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str1.equals(str2);   &lt;span class=&#34;comment&#34;&gt;//将会返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str1.equals(&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;//返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;.equals(str2);   &lt;span class=&#34;comment&#34;&gt;//返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.equalsIgnoreCase(String str)方法&lt;br&gt;使用这个方法将会忽略字符串的大小写进行比较&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str1=&lt;span class=&#34;string&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ch[]=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;h&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;e&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;l&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str2=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; String(ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str1.equals(str2);   &lt;span class=&#34;comment&#34;&gt;//将会返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;str1.equalsIgnoreCase(str2)  &lt;span class=&#34;comment&#34;&gt;//返回true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.concat(String str)方法&lt;br&gt;使用concat方法可以拼接2个字符串，原字符串不变&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str1=&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str2=&lt;span class=&#34;string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str3=str1.concat(str2);    &lt;span class=&#34;comment&#34;&gt;//str3为helloworld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.charAt(int index)方法&lt;br&gt;charAt方法可以找出字符串任何位置的字符，如果索引不合法将会出现异常&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str1=&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ch = str1.charAt(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//ch为e&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;4.indexOf(String str)方法&lt;br&gt;indexOf方法可以返回str在字符串中出现的第一个位置，没有将会返回-1&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str &amp;#x3D; &amp;quot;helloworld&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int index&amp;#x3D;str.indexOf(&amp;quot;llo&amp;quot;);   &amp;#x2F;&amp;#x2F;index为2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;5.subString(int index1,int index2)方法&lt;br&gt;subString方法可以获取原字符串从index1到index2-1的字串，如果只有一个参数，将默认index2为字符串的length&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str = &lt;span class=&#34;string&#34;&gt;&amp;quot;helloworld&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str1=str.subString(&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//str1为world&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str2=str.subString(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;);  &lt;span class=&#34;comment&#34;&gt;//str2为owo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;6.toCharArray()方法&lt;br&gt;toCharArray方法可以将字符串变成字符数组&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str=&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; ch[]=str.toCharArray();  &lt;span class=&#34;comment&#34;&gt;//ch[]=&amp;#123;&amp;#x27;h&amp;#x27;,&amp;#x27;e&amp;#x27;,&amp;#x27;l&amp;#x27;,&amp;#x27;l&amp;#x27;,&amp;#x27;o&amp;#x27;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;7.replace(String str1,String str2)方法&lt;br&gt;replace方法可以将字符串里值为str1的字符串替换成str2&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str=&lt;span class=&#34;string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str1=str.replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;//str1为he##o&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String str2=str.replace(&lt;span class=&#34;string&#34;&gt;&amp;quot;el&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;ss&lt;span class=&#34;string&#34;&gt;&amp;quot;);   //str2为hsslo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;8.split(char ch)方法&lt;br&gt;split方法将会将字符串在ch处切割开成String数组,支持ch为空格&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String str=&lt;span class=&#34;string&#34;&gt;&amp;quot;aaa,bbb,ccc&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String s[]=str.split(&lt;span class=&#34;string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;comment&#34;&gt;//s[]=&amp;#123;&amp;quot;aaa&amp;quot;,&amp;quot;bbb&amp;quot;,&amp;quot;ccc&amp;quot;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;字符串的注意事项&#34;&gt;&lt;a href=&#34;#字符串的注意事项&#34; class=&#34;headerlink&#34; title=&#34;字符串的注意事项&#34;&gt;&lt;/a&gt;字符串的注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;字符串是常量&lt;/li&gt;
&lt;li&gt;字符串相当于char[]数组，但是在计算机底层是用byte[]数组实现的，因为字符使用ascii编码，在计算机底层翻译成数字储存在字节数组中&lt;/li&gt;
&lt;li&gt;当使用String直接赋值创建多个值相同的字符串时，实际上这几个字符串共用字符串常量池，即共用1个地址&lt;/li&gt;
&lt;li&gt;new出来的String字符串不在常量池中，所以new出来的字符串即使只相同地址也不同&lt;/li&gt;
&lt;li&gt;使用==比较时，基本数据类型比较的是值，而其他的比较的是地址&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java21.png&#34; width=600&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;使用equals方法比较时，str.equals(str1)中，str不能为空字符串，否则会出现空指针异常&lt;/li&gt;
&lt;li&gt;字符串无论经过什么操作其都不会发生改变，给字符串赋其他值实际上是改变了字符串指向的地址&lt;/li&gt;
&lt;li&gt;split方法中的参数是正则表达式参数，如要使用.作为分隔符，必须要写出//.才行，否则不会进行切割&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;关于static&#34;&gt;&lt;a href=&#34;#关于static&#34; class=&#34;headerlink&#34; title=&#34;关于static&#34;&gt;&lt;/a&gt;关于static&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;static是修饰类静态成员的关键字，而静态成员是直接属于类的，即使用类名可以直接调用静态成员，同时，它属于类的成员，也可以使用对象进行调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态成员可以不创建对象而直接通过类调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在类的内部，静态成员可以直接使用省略前面的类名或者对象名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态方法不可以调用非静态成员&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        StaticDemo sd = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; StaticDemo();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        StaticDemo.staticMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(StaticDemo.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(sd.count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        method1();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;//   method2();    //会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println((staticNum));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Test t=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; Test();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println((t.num));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; staticNum=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;method1&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method2&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;method2&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态方法的执行优先于非静态方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态代码块用于对静态成员的一次性赋值，静态代码块只执行一次，无论创建多少个对象都只执行一次，用法为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  static&amp;#123;
      //静态代码块
  &amp;#125;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Arrays类&#34;&gt;&lt;a href=&#34;#Arrays类&#34; class=&#34;headerlink&#34; title=&#34;Arrays类&#34;&gt;&lt;/a&gt;Arrays类&lt;/h1&gt;&lt;p&gt;Arrays类在java.util.Arrays包中，是对数组的辅助工具类&lt;br&gt;1.Arrays.toString()&lt;br&gt;toString方法可以将数组变成字符串形式&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr1=&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;String StrArr1=Arrays.toString(arr1);        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(Array.toString(strArr1));   &lt;span class=&#34;comment&#34;&gt;//输出[1,2,3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.Arrays.sort()&lt;br&gt;sort方法可以对数组进行升序排序，如果是数字则从小到大排列，如果是字母则按首字母字典序顺序排列&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;String[] strArr=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Arrays.sort(strArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(Arrays.toString(strArr));    &lt;span class=&#34;comment&#34;&gt;//输出[aaa,bbb,ccc,dd]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.toCharArray()&lt;br&gt;toCharArray方法可以将字符串转变为字符数组,用法为：Char []chStr=字符串名.toCharArray();&lt;/p&gt;
&lt;h1 id=&#34;math类&#34;&gt;&lt;a href=&#34;#math类&#34; class=&#34;headerlink&#34; title=&#34;math类&#34;&gt;&lt;/a&gt;math类&lt;/h1&gt;&lt;p&gt;math类在java.util.Math包中，提供了许多有数学运算相关的方法&lt;br&gt;1.abs()方法&lt;br&gt;使用Math.abs(double num)可以获得num的绝对值，但是num本身不变&lt;br&gt;2.ceil()方法&lt;br&gt;Math.ceil(double num)可以获取num的向上取整的浮点数，如num是3.1，则Math.ceil(3.1)为4.0&lt;br&gt;3.floor()方法&lt;br&gt;Math.floor(double num)方法为向下取整&lt;br&gt;4.round()方法&lt;br&gt;Math.round(double num)方法可以对num进行四舍五入取整&lt;/p&gt;
&lt;h1 id=&#34;关于java的继承&#34;&gt;&lt;a href=&#34;#关于java的继承&#34; class=&#34;headerlink&#34; title=&#34;关于java的继承&#34;&gt;&lt;/a&gt;关于java的继承&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;子类可以直接访问父类所有的public成员，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当子类和父类有重名成员变量或方法时，通过对象调用该同名变量或方法，则先在该对象所在的类中寻找，若找不到则再向父类中寻找，这就是java的重写，可以通过在方法前加上@override检测是否合法重写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当子类和父类有成员方法用到了同名成员变量时，则调用该方法时，优先在该方法的类中寻找变量，没有再向父类寻找&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于类中的方法局部变量，成员变量和父类成员变量三者同名的调用：局部变量通过覆盖规则可以直接使用，本类成员变量则用this.变量名调用，父类变量用super.变量名调用&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//father类定义了num=10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//son类如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;printNum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        system.out.println(num);   &lt;span class=&#34;comment&#34;&gt;//30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        system.out.println(&lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.num);    &lt;span class=&#34;comment&#34;&gt;//20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        system.out.println(&lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;.num);       &lt;span class=&#34;comment&#34;&gt;//10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关于重写，只是方法的重写，而变量不能重写，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;必须要求方法名称，参数列表相同，并且子类的返回类型小于或者等于父类的返回值类型，比如：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//父类方法为public object method();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//子类：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; string &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;//符合重写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//父类方法为public string method();  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//子类：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; object &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;;   &lt;span class=&#34;comment&#34;&gt;//不符合重写&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重写的目的：在应用中，主要是在产品的更新换代中，每一个子类代表一代新产品，而子类直接继承功能不变的函数，而对需要升级的函数进行重写覆盖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于构造方法：子类调用构造方法时必须调用父类的构造方法，且如果父类构造方法中有参数时，必须使用super关键字为父类构造方法传递实参&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;默认父类构造方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;重载子类构造方法&amp;quot;&lt;/span&gt;+num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;默认子类构造方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;super&lt;/span&gt;(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;重载子类构造方法&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;son son1=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; son();      &lt;span class=&#34;comment&#34;&gt;//输出：默认父类构造方法  默认子类构造方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;son son2=&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; son(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);      &lt;span class=&#34;comment&#34;&gt;//输出：重载子类构造方法1   重载子类构造方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造方法之间可以相互调用，通过this()即可，但是构造方法中不能同时存在super()和this()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次调用方法时，都是将方法区中的方法进栈&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;多态&#34;&gt;&lt;a href=&#34;#多态&#34; class=&#34;headerlink&#34; title=&#34;多态&#34;&gt;&lt;/a&gt;多态&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用父类对象创建子类引用时，是将子类当成父类使用，如把猫当成动物看，所以调用方法时优先调用子类的，若子类没有则向上寻找父类的&lt;/li&gt;
&lt;li&gt;使用父类对象创建子类引用时，对象无法调用子类的变量&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;showNum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//子类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; age=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;showNum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//测试&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      father obj =&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; son();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(obj.num);   &lt;span class=&#34;comment&#34;&gt;//父类变量10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;// System.out.println(obj.age);   //会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        obj.showNum();       &lt;span class=&#34;comment&#34;&gt;//优先调用子类方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;final关键字&#34;&gt;&lt;a href=&#34;#final关键字&#34; class=&#34;headerlink&#34; title=&#34;final关键字&#34;&gt;&lt;/a&gt;final关键字&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用final关键字修饰类时，该类不可以被继承，并且该类的成员不可以被重写覆盖，但是该类可以重写覆盖他的父类方法&lt;/li&gt;
&lt;li&gt;final关键字修饰的方法不能被覆盖重写&lt;/li&gt;
&lt;li&gt;abstract和final不能同时修饰一个方法&lt;/li&gt;
&lt;li&gt;用final关键字修饰的变量不可以被改变，但是只声明用final修饰的变量，依然可以后续为该变量赋值，但赋值后就不可更改了&lt;/li&gt;
&lt;li&gt;用final关键字修饰的对象其地址值不可改变，所以对该对象使用new方法重新分配内存空间会报错&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java23.png&#34; width=600&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;用final修饰的成员变量，要么直接赋值，要么在构造方法里赋值并且两者不能同时赋值，注意所有构造方法的重载形式中都要包含对final修饰的成员变量赋值&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;father&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        age=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;     &lt;span class=&#34;comment&#34;&gt;//若是默认构造方法中没有对age赋值将会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;son&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; age)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;this&lt;/span&gt;.age=age;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;访问权限&#34;&gt;&lt;a href=&#34;#访问权限&#34; class=&#34;headerlink&#34; title=&#34;访问权限&#34;&gt;&lt;/a&gt;访问权限&lt;/h1&gt;&lt;p&gt;对于不同权限修饰符，不同的类，不同的包中访问权限有所差异：&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java24.png&#34; width=600&gt;&lt;/div&gt;

&lt;h1 id=&#34;内部类&#34;&gt;&lt;a href=&#34;#内部类&#34; class=&#34;headerlink&#34; title=&#34;内部类&#34;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;p&gt;(一）类中的内部类&lt;br&gt;在java中，类中可以定义另一个类，称为内部类，关于内部类有2种使用方法&lt;br&gt;1.在外部类的方法中调用内部类的方法成员，然后在main函数中调用该外部类方法间接调用内部类方法&lt;br&gt;2.直接调用： 外部类名称.内部类名称 对象名 = new 外部类().new 内部类();该对象可以直接调用内部类方法&lt;br&gt;(二)局部内部类，即方法里的内部类&lt;br&gt;在方法里定义的内部类，要想使用它，只能在局部方法里声明对象并对局部内部类的方法进行调用&lt;/p&gt;
&lt;h2 id=&#34;匿名内部类&#34;&gt;&lt;a href=&#34;#匿名内部类&#34; class=&#34;headerlink&#34; title=&#34;匿名内部类&#34;&gt;&lt;/a&gt;匿名内部类&lt;/h2&gt;&lt;p&gt;如果接口的实现类只需要使用唯一的一次，那么这种情况下就可以省略该实现类的定义，而改用使用匿名内部类，其定义格式为：&lt;br&gt;接口名称 对象名 = new 接口名称(){&lt;br&gt;    //覆盖重写抽象方法&lt;br&gt;}；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;匿名内部类只能创建一个对象，因为它省略了【实现类/子类名称】，无法通过构造方法再次创建对象&lt;/li&gt;
&lt;li&gt;匿名对象只能调用一次，一个方法，因为他省略了【对象名称】，无法再次通过对象名调用方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;&lt;a href=&#34;#注意事项&#34; class=&#34;headerlink&#34; title=&#34;注意事项&#34;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内部类可以使用外部类中的所有成员，包括private修饰的成员&lt;/li&gt;
&lt;li&gt;在内部类中和外部类中有同名变量时，在内部类中，使用this指的是内部类对象，要使用外部类的成员变量，则需要使用外部类名.this.变量名&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java25.png&#34; width=600&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;关于内部类和外部类的权限修饰问题&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java26.png&#34; width=600&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;在局部内部类中，要想访问局部变量，该变量必须是有效final的，有效指的是在局部方法中，该变量没有二次赋值&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; outer&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;    &lt;span class=&#34;comment&#34;&gt;//等效final，因为没有改变&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num1=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num1=&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;;       &lt;span class=&#34;comment&#34;&gt;//发生了改变，不等效final&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;inner&lt;/span&gt;&lt;/span&gt;&amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(num);   &lt;span class=&#34;comment&#34;&gt;//正确，输出10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            System.out.println(num1);    &lt;span class=&#34;comment&#34;&gt;//将会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;匿名内部类的对象可以作为方法的参数，匿名内部类的匿名对象也可以直接作为方法的参数：&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 定义了接口为Skill&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F; 定义了一个类Hero，Hero有一个方法为setSkill（Skill skill）&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x2F;&amp;#x2F;使用匿名内部类的匿名对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Hero hero &amp;#x3D; new Hero();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;hero.setSkill(new Skill()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    @override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    public void use()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(&amp;quot;use skill&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Object的一些方法&#34;&gt;&lt;a href=&#34;#Object的一些方法&#34; class=&#34;headerlink&#34; title=&#34;Object的一些方法&#34;&gt;&lt;/a&gt;Object的一些方法&lt;/h1&gt;&lt;h2 id=&#34;toString-方法&#34;&gt;&lt;a href=&#34;#toString-方法&#34; class=&#34;headerlink&#34; title=&#34;toString()方法&#34;&gt;&lt;/a&gt;toString()方法&lt;/h2&gt;&lt;p&gt;toString方法是Object类中的一个方法，返回值为字符串，而Object类是所有类的父类，所以toString方法可以供所有对象调用，一般来说，是在类中重写toString方法方便一些操作：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; String name = &lt;span class=&#34;string&#34;&gt;&amp;quot;tom&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; age = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;boolean&lt;/span&gt; married = &lt;span class=&#34;keyword&#34;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;title&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;test&amp;#123;&amp;quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;, age=&amp;quot;&lt;/span&gt; + age +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;quot;, married=&amp;quot;&lt;/span&gt; + married +&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &lt;span class=&#34;string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        test t =&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; test();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(t); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;//输出结果为：test&amp;#123;name:&amp;#x27;tom&amp;#x27;,age:&amp;#x27;10&amp;#x27;,married:&amp;#x27;false&amp;#x27;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;一般来说，没有重写toString方法的类，其对象调用toString方法会返回对象的地址值，否则，该类中一定重写了toString方法&lt;/li&gt;
&lt;li&gt;只有对象能调用toString方法，而其他比如说int等基本类型不能&lt;/li&gt;
&lt;li&gt;字符串的toString为原字符串，ArrayList的toString为[…]，它们都对toString进行了重写&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;equals-方法&#34;&gt;&lt;a href=&#34;#equals-方法&#34; class=&#34;headerlink&#34; title=&#34;equals()方法&#34;&gt;&lt;/a&gt;equals()方法&lt;/h2&gt;&lt;p&gt;equals方法也是Object类的一个方法，返回值为bool类型，基本格式为：&lt;br&gt;1.obj1.equals(obj2);   //比较obj1和obj2的地址值&lt;br&gt;2.Object.equals(obj1,obj2);   //另一种形式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同样的，一般我们使用equals()都要对其进行重写，例如String就对equals方法进行了重写，所以String字符串使用equals方法比较的是字符串内容而不是地址值&lt;/li&gt;
&lt;li&gt;null是不能调用方法的，所以使用null.equals(obj)方法将会出现空指针异常，所以我们对字符串使用equals方法时，最好使用第二种形式，防止字符串为空调用方法而抛出空指针异常&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://yoursite.com/2020/10/01/java%E7%AC%94%E8%AE%B0/</guid>
            <title>java学习笔记（一）</title>
            <link>http://yoursite.com/2020/10/01/java%E7%AC%94%E8%AE%B0/</link>
            <category>blog</category>
            <category>java学习</category>
            <category>java</category>
            <pubDate>Thu, 01 Oct 2020 13:45:43 +0800</pubDate>
            <description><![CDATA[ &lt;center&gt;&lt;font face=&#34;黑体&#34; size=8&gt; java基本概念 &lt;/font&gt;&lt;/center&gt;

&lt;h1 id=&#34;JVM-JRE与JDK&#34;&gt;&lt;a href=&#34;#JVM-JRE与JDK&#34; class=&#34;headerlink&#34; title=&#34;JVM,JRE与JDK&#34;&gt;&lt;/a&gt;JVM,JRE与JDK&lt;/h1&gt;&lt;p&gt;java语言有一个非常显著的特征就是跨平台性，无论在什么操作系统上，java程序都能够运行，这就得益于java的JVM。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM&lt;br&gt;&amp;emsp;java虚拟机，简称JVM(java virtual machine），是运行java程序的假想计算机，是java程序的运行环境，我们编写的java代码，都运行在JVM上。&lt;br&gt;&amp;emsp;JVM为什么能使java具有跨平台性呢？原因就在于每个操作系统都具有一个不同的JVM，这些JVM充当了java程序与操作系统之间的中介，java程序直接运行在JVM中，形成的字节码在转运到操作系统，使得java程序在不同平台不需要重新编译，具有跨平台性。&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java1.png&#34; width=600&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;JRE与JDK&lt;br&gt;&amp;emsp;JRE(Java Runtime Environment），是java程序运行时所需的环境，包括JVM和运行时所需要的核心类库，如果只需要运行java程序的话，那么只需要JRE即可。&lt;br&gt;&amp;emsp;JDK(Java Development Kit），是java程序开发的工具包，包括JRE和开发人员使用的工具，如果需要开发java程序，那么就需要安装JDK了。&lt;br&gt;&amp;emsp;这三者的关系是JDK&amp;gt;JRE&amp;gt;JVM，如下图所示&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java2.png&#34; width=600&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;用cmd运行java程序&#34;&gt;&lt;a href=&#34;#用cmd运行java程序&#34; class=&#34;headerlink&#34; title=&#34;用cmd运行java程序&#34;&gt;&lt;/a&gt;用cmd运行java程序&lt;/h1&gt;&lt;p&gt;首先将cmd定位在java程序所在的文件夹中，然后依次使用javac命令和java命令，javac是对java程序进行编译成class字节码，java命令则是运行编译好的class文件，具体操作如下图所示，其中Test.java是我已经编写好的程序&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java3.png&#34; width=600&gt;&lt;/div&gt;

&lt;h1 id=&#34;java程序的注释&#34;&gt;&lt;a href=&#34;#java程序的注释&#34; class=&#34;headerlink&#34; title=&#34;java程序的注释&#34;&gt;&lt;/a&gt;java程序的注释&lt;/h1&gt;&lt;p&gt;java程序的注释与c++类似，有2种注释方法：单行注释和多行注释&lt;br&gt;单行注释：//注释内容，//之后的内容将被计算机忽略&lt;br&gt;多行注释：/* 注释内容，/* */之间的内容将被计算机忽略，可以跨行 */ &lt;/p&gt;
&lt;h1 id=&#34;java关键字和标识符的命名规范&#34;&gt;&lt;a href=&#34;#java关键字和标识符的命名规范&#34; class=&#34;headerlink&#34; title=&#34;java关键字和标识符的命名规范&#34;&gt;&lt;/a&gt;java关键字和标识符的命名规范&lt;/h1&gt;&lt;p&gt;&amp;emsp;和c++语言类似，java也有预先定义的关键字，这些关键字都是全小写，都有特定含义，变量名和类名等都不能与关键字相同。java区分大小写，所以，命名时可以使用标识符的大写，但不建议。&lt;br&gt;&amp;emsp;标识符就是我们自己定义的内容的名称，标识符可以包含英文字母，数字，美元符号$和下划线_,但标识符不能以数字开头&lt;br&gt;建议标识符的命名规范：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类名规范：首字母大写，后面每个单词的首字母大写（大驼峰式）&lt;/li&gt;
&lt;li&gt;变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）&lt;/li&gt;
&lt;li&gt;方法名规范：同变量名&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常量与变量&#34;&gt;&lt;a href=&#34;#常量与变量&#34; class=&#34;headerlink&#34; title=&#34;常量与变量&#34;&gt;&lt;/a&gt;常量与变量&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;font face=&#34;黑体&#34; size=5&gt;1.常量分为字符串常量，整数常量，浮点数常量，字符常量，布尔常量，空常量，用const修饰&lt;/font&gt;&lt;br&gt;字符串常量：String，以’\0’结束，如”abc”,”123”,占n+1个字节，其中n为组成字符串的字符个数。&lt;br&gt;整数常量：short（2字节），int（4字节），long（8字节）&lt;br&gt;浮点数常量：float（4字节），double（8字节）&lt;br&gt;字符常量：char（1字节）&lt;br&gt;布尔常量：bool（1字节）&lt;br&gt;空常量：null（0字节）&lt;/li&gt;
&lt;li&gt;&lt;font face=&#34;黑体&#34; size=5&gt;2.变量，即可以改变的常量，没有const修饰的常量，其类型与常量相同&lt;/font&gt;&lt;br&gt;变量的使用注意事项：&lt;/li&gt;
&lt;li&gt;如果创建多个变量，变量名不可以重复&lt;/li&gt;
&lt;li&gt;对于float和long类型，字母后缀的F和L不要去掉&lt;/li&gt;
&lt;li&gt;如果使用byte和short类型的变量，右侧的数据值不要超过左侧类型的范围&lt;/li&gt;
&lt;li&gt;一定要对变量赋值后才能使用&lt;/li&gt;
&lt;li&gt;变量使用不能超过作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;数据类型转换&#34;&gt;&lt;a href=&#34;#数据类型转换&#34; class=&#34;headerlink&#34; title=&#34;数据类型转换&#34;&gt;&lt;/a&gt;数据类型转换&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;自动类型转换，数据类型从小到大，将会自动发生类型转换。&lt;/li&gt;
&lt;li&gt;强制类型转换，当数据类型从大到小，则需要强制转换，不能自动完成,可能会发生精度损失&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//自动转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;long&lt;/span&gt; b=a;  &lt;span class=&#34;comment&#34;&gt;//从int到long，自动转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; c=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; d=c;  &lt;span class=&#34;comment&#34;&gt;//从float到double，自动转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//强制转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num = &lt;span class=&#34;number&#34;&gt;100L&lt;/span&gt;; &lt;span class=&#34;comment&#34;&gt;//会报错，int无法自动转换为long&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num = (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;)&lt;span class=&#34;number&#34;&gt;100L&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;//正确，实现了强制转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; s=&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a=(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;)s;   &lt;span class=&#34;comment&#34;&gt;//正确，将字符串强制转化成int整数,将会输出a的ASCII码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ASCII码表&#34;&gt;&lt;a href=&#34;#ASCII码表&#34; class=&#34;headerlink&#34; title=&#34;ASCII码表&#34;&gt;&lt;/a&gt;ASCII码表&lt;/h1&gt;&lt;p&gt;ASCII是使用7位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，基本上所有的计算机语言都会用到ASCII码进行编码，JAVA也是如此，只不过java也是使用了Unicode编码，把ASCII码表放在这里便于查看&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java4.jpg&#34; width=600&gt;&lt;/div&gt;

&lt;h1 id=&#34;java编译器的一些优化&#34;&gt;&lt;a href=&#34;#java编译器的一些优化&#34; class=&#34;headerlink&#34; title=&#34;java编译器的一些优化&#34;&gt;&lt;/a&gt;java编译器的一些优化&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;对于byte，short，char三种类型，如果右侧赋值的数据大小没有超过范围，那么java编译器会自动加上（byte），（short），（char），例如：&lt;br&gt;byte a = 30 &amp;lt;==&amp;gt; byte a = (byte) 30&lt;/li&gt;
&lt;li&gt;但是，当右侧赋值的数据大小超过范围后，java编译器则会直接报错&lt;/li&gt;
&lt;li&gt;java中的加法默认将加数当作int数据类型，所以使用2个short类型的变量相加赋予另一个short类型时，编译器会报错，但是当short类型的右边赋予的是两个常量相加，那么编译器不会报错，而是会直接先将常量相加直接赋予short：&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;short&lt;/span&gt; a=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;short&lt;/span&gt; b=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;short&lt;/span&gt; c=a+b;   &lt;span class=&#34;comment&#34;&gt;//会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;short&lt;/span&gt; c=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;+&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;;  &lt;span class=&#34;comment&#34;&gt;//正确&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
报错原因：&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java5.png&#34; width=600&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;jshell的使用&#34;&gt;&lt;a href=&#34;#jshell的使用&#34; class=&#34;headerlink&#34; title=&#34;jshell的使用&#34;&gt;&lt;/a&gt;jshell的使用&lt;/h1&gt;&lt;p&gt;jshell是java的交互式运行环境，类似于python的命令行的交互式运行环境，直接在命令提示符中输入jshell进入Java交互环境，之后直接输入一条java语句，便能直接输出语句结果，注意jshell中的语句不用以分号结尾。&lt;/p&gt;
&lt;h1 id=&#34;选择结构&#34;&gt;&lt;a href=&#34;#选择结构&#34; class=&#34;headerlink&#34; title=&#34;选择结构&#34;&gt;&lt;/a&gt;选择结构&lt;/h1&gt;&lt;p&gt;1.if语句&lt;br&gt;在Java程序中，如果要根据条件来决定是否执行某一段代码，就需要if语句。根据if的计算结果（true还是false），JVM决定是否执行if语句块（即花括号{}包含的所有语句）。&lt;/p&gt;
&lt;p&gt;2.除了if语句外，还有一种条件判断，是根据某个表达式的结果，分别去执行不同的分支。switch语句根据switch (表达式)计算的结果，跳转到匹配的case结果，然后继续执行后续语句，直到遇到break结束执行。switch语句的基本语法是：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;switch&lt;/span&gt; (option) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// option=1时执行语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// option=2时执行语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// option=3时执行语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;comment&#34;&gt;// option都不符合时执行语句&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;循环结构&#34;&gt;&lt;a href=&#34;#循环结构&#34; class=&#34;headerlink&#34; title=&#34;循环结构&#34;&gt;&lt;/a&gt;循环结构&lt;/h1&gt;&lt;p&gt;循环语句就是让计算机根据条件做循环计算，在条件满足时继续循环，条件不满足时退出循环。&lt;br&gt;除了for，while外，Java还提供了一种for each循环，它可以更简单地遍历数组，和for循环相比，for each循环的变量n不再是计数器，而是直接对应到数组的每个元素。但是，for each循环无法指定遍历顺序，也无法获取数组的索引。它的用法如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] ns = &amp;#123; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;16&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;25&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n : ns) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   System.out.println(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;break和continue&#34;&gt;&lt;a href=&#34;#break和continue&#34; class=&#34;headerlink&#34; title=&#34;break和continue&#34;&gt;&lt;/a&gt;break和continue&lt;/h2&gt;&lt;h2 id=&#34;break&#34;&gt;&lt;a href=&#34;#break&#34; class=&#34;headerlink&#34; title=&#34;break&#34;&gt;&lt;/a&gt;break&lt;/h2&gt;&lt;p&gt;在循环过程中，可以使用break语句跳出当前循环，break会跳出当前循环，当有多个嵌套的循环时，break只能跳出最内层的循环，然后剩下的循环都不会执行了。&lt;/p&gt;
&lt;h2 id=&#34;continue&#34;&gt;&lt;a href=&#34;#continue&#34; class=&#34;headerlink&#34; title=&#34;continue&#34;&gt;&lt;/a&gt;continue&lt;/h2&gt;&lt;p&gt;continue是提前结束本次循环，直接继续执行下次循环,在多层嵌套的循环中，continue语句同样是结束本次自己所在的循环。比如算从1-100的奇数的和时用continue就会很方便：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; sum=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;=&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(i==&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sum+=i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;方法&#34;&gt;&lt;a href=&#34;#方法&#34; class=&#34;headerlink&#34; title=&#34;方法&#34;&gt;&lt;/a&gt;方法&lt;/h1&gt;&lt;h2 id=&#34;方法的注意事项&#34;&gt;&lt;a href=&#34;#方法的注意事项&#34; class=&#34;headerlink&#34; title=&#34;方法的注意事项&#34;&gt;&lt;/a&gt;方法的注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;方法必须定义在类中，且不能在方法中再定义方法&lt;/li&gt;
&lt;li&gt;方法定义的前后顺序无所谓&lt;/li&gt;
&lt;li&gt;如果方法有返回值，那么必须加上return返回值，不能没有&lt;/li&gt;
&lt;li&gt;对于void方法，不能return加返回值，只能直接return；&lt;/li&gt;
&lt;li&gt;一个方法可以有多个return语句，但是必须保证能执行的只有一个 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法重载&#34;&gt;&lt;a href=&#34;#方法重载&#34; class=&#34;headerlink&#34; title=&#34;方法重载&#34;&gt;&lt;/a&gt;方法重载&lt;/h2&gt;&lt;p&gt;在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法，这种方法名相同，但各自的参数不同，称为方法重载（Overload），方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。&lt;br&gt;例如，String类提供了多个重载方法indexOf()，可以查找子串：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int indexOf(int ch)：根据字符的Unicode码查找；&lt;/li&gt;
&lt;li&gt;int indexOf(String str)：根据字符串查找；&lt;/li&gt;
&lt;li&gt;int indexOf(int ch, int fromIndex)：根据字符查找，但指定起始位置；&lt;/li&gt;
&lt;li&gt;int indexOf(String str, int fromIndex)根据字符串查找，但指定起始位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重载的注意事项&#34;&gt;&lt;a href=&#34;#重载的注意事项&#34; class=&#34;headerlink&#34; title=&#34;重载的注意事项&#34;&gt;&lt;/a&gt;重载的注意事项&lt;/h2&gt;&lt;p&gt;1.方法的重载与下列因素相关：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数的个数不同&lt;/li&gt;
&lt;li&gt;参数的类型不同&lt;/li&gt;
&lt;li&gt;参数的多类型顺序不同&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; y,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; z)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;puclic &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//以上正确，都能构成重载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.方法的重载与下列因素无关：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;与参数的名称无关&lt;/li&gt;
&lt;li&gt;与方法的返回值类型无关&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sun&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; a,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//以上不能构成重载会报错，因为与方法参数的名称无关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; x,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//以上也不能构成重载会报错，因为与方法的返回类型无关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;数组&#34;&gt;&lt;a href=&#34;#数组&#34; class=&#34;headerlink&#34; title=&#34;数组&#34;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;定义一个数组类型的变量，使用数组类型“类型[]”，有以下几种创建方法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int[] a={1,2,3,4,5};    //根据{}之间的元素个数自动创建&lt;/li&gt;
&lt;li&gt;int[] a=new int{1,2,3,4,5}  //同上&lt;/li&gt;
&lt;li&gt;int[] a=new int[5];a={1,2,3,4,5};    //先创建容量为5的数组，再赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组的内存&#34;&gt;&lt;a href=&#34;#数组的内存&#34; class=&#34;headerlink&#34; title=&#34;数组的内存&#34;&gt;&lt;/a&gt;数组的内存&lt;/h2&gt;&lt;p&gt;1.当动态创建一个数组时，系统将会在栈区先写入数组名称，然后在堆区开辟空间存放数组元素，其中数组的索引也是存放在栈区的，当你要修改数组元素的值时，你首先将访问栈区的索引，然后这个索引再指向堆区对应的内存，如下图所示:&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java7.png&#34; width=600&gt;&lt;/div&gt;

&lt;p&gt;2.当一个数组赋值给另一个数组时：int[] arrayB = arrayA;这时候是将arrayA的地址直接赋值给arrayB了，此时arrayA和arrayB共用一个内存，本质上时同一个数组，其内存分配如下所示：&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java8.png&#34; width=600&gt;&lt;/div&gt;

&lt;h2 id=&#34;数组注意事项：&#34;&gt;&lt;a href=&#34;#数组注意事项：&#34; class=&#34;headerlink&#34; title=&#34;数组注意事项：&#34;&gt;&lt;/a&gt;数组注意事项：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；&lt;/li&gt;
&lt;li&gt;要访问数组中的某一个元素，需要使用索引。数组索引从0开始&lt;/li&gt;
&lt;li&gt;可以修改数组中的某一个元素，使用赋值语句&lt;/li&gt;
&lt;li&gt;可以用数组变量.length获取数组大小&lt;/li&gt;
&lt;li&gt;数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错&lt;/li&gt;
&lt;li&gt;直接输出数组名称将会得到数组的首地址&lt;/li&gt;
&lt;li&gt;数组的2个异常：超出数组索引(ArrayIndexOutOfBoundsException),空指针异常(NullPointerException):创建一个空数组时访问数组元素将会出现空指针异常&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组的使用&#34;&gt;&lt;a href=&#34;#数组的使用&#34; class=&#34;headerlink&#34; title=&#34;数组的使用&#34;&gt;&lt;/a&gt;数组的使用&lt;/h2&gt;&lt;p&gt;1.简单遍历输出&lt;br&gt;由于java提供了获取数组长度的方法（array.length），所以对于数组的遍历非常方便：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] array=&amp;#123;&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;i&amp;lt;array.length;i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    System.out.println(array[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2.查找数组最大值&lt;br&gt;以最大值为例，只需要用一个变量记录首元素，在遍历数组时，每次比较得出最大值更新这个变量即可&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] array=&amp;#123;&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; max=array[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;i&amp;lt;array.length;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt;(max&amp;lt;array[i]) max=array[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;System.out.println(&lt;span class=&#34;string&#34;&gt;&amp;quot;最大值为：&amp;quot;&lt;/span&gt;+max);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3.数组的排序&lt;br&gt;对数组的排序中，常用的排序算法有冒泡排序、插入排序和快速排序等。以冒泡排序为例：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; ns.length - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; j = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; j &amp;lt; ns.length - i - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (ns[j] &amp;gt; ns[j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; tmp = ns[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ns[j] = ns[j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ns[j+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在java中，其标准库内已经内置了排序功能，我们也可以对它直接进行调用：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; java.util.Arrays;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] ns = &amp;#123; &lt;span class=&#34;number&#34;&gt;28&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;89&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;73&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;65&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;18&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;96&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;36&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Arrays.sort(ns);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.println(Arrays.toString(ns));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;二维数组&#34;&gt;&lt;a href=&#34;#二维数组&#34; class=&#34;headerlink&#34; title=&#34;二维数组&#34;&gt;&lt;/a&gt;二维数组&lt;/h1&gt;&lt;p&gt;二维数组可以理解为在一个数组中再定义数组，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int[][] ns = &amp;#123;
        &amp;#123; 1, 2, 3, 4 &amp;#125;,
        &amp;#123; 5, 6, 7, 8 &amp;#125;,
        &amp;#123; 9, 10, 11, 12 &amp;#125;
    &amp;#125;;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为ns包含3个数组，所以ns的长度为3&lt;/p&gt;
&lt;h2 id=&#34;二维数组的内存&#34;&gt;&lt;a href=&#34;#二维数组的内存&#34; class=&#34;headerlink&#34; title=&#34;二维数组的内存&#34;&gt;&lt;/a&gt;二维数组的内存&lt;/h2&gt;&lt;p&gt;二维数组在系统中的内存占用如下：&lt;/p&gt;
&lt;div align=center&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java9.png&#34; width=500&gt;&lt;/div&gt;

&lt;h2 id=&#34;打印二维数组&#34;&gt;&lt;a href=&#34;#打印二维数组&#34; class=&#34;headerlink&#34; title=&#34;打印二维数组&#34;&gt;&lt;/a&gt;打印二维数组&lt;/h2&gt;&lt;p&gt;打印二维数组可以用两层嵌套循环：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;[] arr : ns) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; n : arr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.print(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        System.out.print(&lt;span class=&#34;string&#34;&gt;&amp;#x27;, &amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以直接使用Java标准库的Arrays.deepToString()直接打印二维数组。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
