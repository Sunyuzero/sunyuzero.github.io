{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunyuzero-Blog",
    "description": "",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/10/18/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "http://yoursite.com/2020/10/18/java%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "java学习笔记（二）",
            "date_published": "2020-10-18T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 接口&&正则表达式 </font></center>\n\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h2><p>java单继承性原因：避免继承的多个类中有相同定义的方法名称导致二义性。<br>接口的存在是为了多实现，克服java单继承的缺点。而接口与类的区别如下：</p>\n<ul>\n<li>类中成员可分为public，private和proteced，而接口默认全为public</li>\n<li>类中的方法可以声明并定义，而接口的方法只能声明</li>\n<li>类中可以定义变量而接口只能定义常量</li>\n</ul>\n<h2 id=\"2-接口的声明与实现\"><a href=\"#2-接口的声明与实现\" class=\"headerlink\" title=\"2.接口的声明与实现\"></a>2.接口的声明与实现</h2><h3 id=\"1-接口的声明只需interface-示例如下：\"><a href=\"#1-接口的声明只需interface-示例如下：\" class=\"headerlink\" title=\"1.接口的声明只需interface,示例如下：\"></a>1.接口的声明只需interface,示例如下：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span>  <span class=\"title\">Printable</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> MAX=<span class=\"number\">100</span>; <span class=\"comment\">//public final int</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">()</span></span>;    <span class=\"comment\">//public abstract void add</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">float</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">float</span> x ,<span class=\"keyword\">float</span> y)</span></span>;<span class=\"comment\">//public abstract float.. </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：\"><a href=\"#2-实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：\" class=\"headerlink\" title=\"2.实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：\"></a>2.实现接口用implements关键字，一个类支持实现多接口，不同的类也可以实现一个接口，示例如下：</h3><pre><code>class A implements interfaceA,interfaceB  //一个类多实现接口\nclass C implements interfaceA   //多个类实现同一个接口</code></pre>\n<h3 id=\"3-接口变量做参数回调\"><a href=\"#3-接口变量做参数回调\" class=\"headerlink\" title=\"3.接口变量做参数回调\"></a>3.接口变量做参数回调</h3><p>1.首先声明接口，一个文件只能定义一个与文件名相同的接口：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java10.png\" width=600></div>\n2.类实现接口：\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java11.png\" width=600></div>\n\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java12.png\" width=600></div>\n3.以接口对象作为参数\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java13.png\" width=600></div>\n\n<p>4.接口回调<br>形参为接口对象，实参为类实例，将类实例赋值给接口对象，通过回调实现函数的调用：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java14.png\" width=600></div>\n\n\n<h2 id=\"3-接口的一些注意事项\"><a href=\"#3-接口的一些注意事项\" class=\"headerlink\" title=\"3.接口的一些注意事项\"></a>3.接口的一些注意事项</h2><div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java15.jpg\" width=600></div>\n\n\n<h1 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h1><p>正则表达式，用于字符串的匹配，可以控制输入和输出，实现字符串的验证，查找和替换。</p>\n<h2 id=\"常见的正则表达式\"><a href=\"#常见的正则表达式\" class=\"headerlink\" title=\"常见的正则表达式\"></a>常见的正则表达式</h2><div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java16.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java17.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java18.png\" width=600></div>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java19.png\" width=600></div>\n\n<h2 id=\"对一些正则表达式的理解\"><a href=\"#对一些正则表达式的理解\" class=\"headerlink\" title=\"对一些正则表达式的理解\"></a>对一些正则表达式的理解</h2><ul>\n<li>限定符</li>\n</ul>\n<p>1.在正则表达式的规则中，. 表示 匹配除换行符 \\n 之外的任何单字符，<em>表示零次或多次,所以 .</em> 表示匹配任意字符匹配次或多次。<br>2. .* 可以匹配空字符，即开始和结尾字符中间可以没有字符，而使用 .+ 则必须保证匹配的字符串中间含有非空字符。<br>3.{n}表示出现n次，{n,}表示至少出现n次。</p>\n<ul>\n<li>贪婪匹配和懒惰匹配<br>&emsp;在正则表达式中，以？作为贪婪模式和懒惰模式的区别标志，例如：字符串为abaabc，懒惰模式使用“ a.*?b ”将会匹配从a开始b结束的最短字符，即ab；而贪婪模式“ a.*b ”，将会匹配从a开始b结束的最长字符串，即adaab。</li>\n</ul>\n<h2 id=\"正则表达式的应用：对身份证进行识别\"><a href=\"#正则表达式的应用：对身份证进行识别\" class=\"headerlink\" title=\"正则表达式的应用：对身份证进行识别\"></a>正则表达式的应用：对身份证进行识别</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"对象的一些注意事项\"><a href=\"#对象的一些注意事项\" class=\"headerlink\" title=\"对象的一些注意事项\"></a>对象的一些注意事项</h1><p>1.在创建一个对象，使用构造函数new一个对象时，先在堆区分配内存放置对象的成员变量，和成员方法的地址，在方法区放置方法的声明，当调用方法或者定义方法时，在栈区开辟内存存放。</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java19.png\" width=600></div>\n2.当2个对象使用同一个方法时，不会相互干扰，因为使用了new创建新空间，但是当一个对象直接赋值给另一个对象，那么这2个对象共用一个内存空间，本质上是一样的。\n3.java支持匿名对象，即可以直接使用new Object().method；直接调用对象的方法，但是匿名对象只能使用一次，使用完了就找不到匿名对象的地址了。所以匿名对象一般被用于作为方法的实参。\n\n<h2 id=\"对象数组\"><a href=\"#对象数组\" class=\"headerlink\" title=\"对象数组\"></a>对象数组</h2><p>对象数组，就是为对象类型的数组，数组元素存放的是对象的地址值，使用方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person[] array = <span class=\"keyword\">new</span> Person[<span class=\"number\">3</span>];</span><br><span class=\"line\">array[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Tom&quot;</span>);       <span class=\"comment\">//地址</span></span><br><span class=\"line\">array[<span class=\"number\">1</span>]=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Jack&quot;</span>);      <span class=\"comment\">//地址</span></span><br><span class=\"line\">array[<span class=\"number\">2</span>]=<span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;marial&quot;</span>);    <span class=\"comment\">//地址</span></span><br><span class=\"line\">System.out.println(array[<span class=\"number\">0</span>].getName());  <span class=\"comment\">//将会打印Tom</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h1><p>ArrayList类似于动态数组，是java的一个封装类，可以实现长度的随意变化。</p>\n<h2 id=\"ArrayList的使用\"><a href=\"#ArrayList的使用\" class=\"headerlink\" title=\"ArrayList的使用\"></a>ArrayList的使用</h2><p>1.声明ArrayList对象<br>首先要导入java.util.ArrayList的包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList &lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();  <span class=\"comment\">//尖括号内是list的数据类型，要求为泛型</span></span><br></pre></td></tr></table></figure>\n<p>2.ArrayList的增加和删除数据，查找数据<br>使用ArrayList类的add，remove和get方法可以实现数据的增删，查找</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增加数据</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;Tom&quot;</span>);</span><br><span class=\"line\">System.out.println(list);   <span class=\"comment\">//输出[Tom]</span></span><br><span class=\"line\">list.add(<span class=\"string\">&quot;jack&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;james&quot;</span>);</span><br><span class=\"line\">System.out.println(list);   <span class=\"comment\">//输出[Tom,jack,james]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查找数据</span></span><br><span class=\"line\">String name = list.get(<span class=\"number\">2</span>);    <span class=\"comment\">//索引从0开始，name为james</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//删除数据</span></span><br><span class=\"line\">list.remove(<span class=\"number\">2</span>);    <span class=\"comment\">//将会删除第三个元素，即删除james</span></span><br><span class=\"line\">System.out.println(list)   <span class=\"comment\">//打印[Tom,jack]</span></span><br></pre></td></tr></table></figure>\n<p>3.获取ArrayList的长度<br>使用size()方法可以返回List的长度</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> size = list.size(); <span class=\"comment\">//size为2，因为前面删除了一个元素</span></span><br></pre></td></tr></table></figure>\n<p>4.ArrayList的对象类型<br>ArrayList的泛型也支持自己写的类,假如我已经写好了Student类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList &lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Student one = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;stu1&quot;</span>);</span><br><span class=\"line\">Student two = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;stu2&quot;</span>);</span><br><span class=\"line\">list.add(one);</span><br><span class=\"line\">list.add(two);</span><br><span class=\"line\"><span class=\"comment\">//使用list当中的对象</span></span><br><span class=\"line\">Student s1 = list.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">String name = s1.getName();  <span class=\"comment\">//name为stu1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ArrayList的注意事项\"><a href=\"#ArrayList的注意事项\" class=\"headerlink\" title=\"ArrayList的注意事项\"></a>ArrayList的注意事项</h2><ul>\n<li>声明ArrayList时尖括号内必须为泛型，泛型只能为引用类型，而不能是基本数据类型如int之类的，所以想使用基本数据类型，必须使用基本数据类型对应的包装类<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java20.png\" width=600></div></li>\n<li>直接输出ArrayList的对象将会输出ArrayList的内容，并有着中括号[]括起来，如果ArrayList为空，会直接输出[]</li>\n<li>list.add()方法有布尔返回值，添加成功返回true，失败返回false</li>\n<li>list.remove()方法也有返回值，将会返回被删除的元素的值</li>\n</ul>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"字符串的3种创建方法\"><a href=\"#字符串的3种创建方法\" class=\"headerlink\" title=\"字符串的3种创建方法\"></a>字符串的3种创建方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span>直接创建</span><br><span class=\"line\">String str1 = <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\"><span class=\"number\">2.</span>根据字符数组创建</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=&#123;<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>&#125;;</span><br><span class=\"line\">String str2 = <span class=\"keyword\">new</span> String(ch);   <span class=\"comment\">//str2=&quot;ABC&quot;</span></span><br><span class=\"line\"><span class=\"number\">3.</span>根据字节数组创建</span><br><span class=\"line\"><span class=\"keyword\">byte</span> by[] = &#123;<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>&#125;;</span><br><span class=\"line\">String str3 = <span class=\"keyword\">new</span> String(by);   <span class=\"comment\">//str3=&quot;abc&quot;</span></span><br><span class=\"line\"><span class=\"number\">4.</span>不赋值将创建空字符串</span><br><span class=\"line\">String str4 = <span class=\"keyword\">new</span> String();   <span class=\"comment\">//str4为空字符串</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的一些方法\"><a href=\"#字符串的一些方法\" class=\"headerlink\" title=\"字符串的一些方法\"></a>字符串的一些方法</h2><p>1.equals(String str)方法<br>使用equals方法将会比较字符串的内容，不会比较地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=&#123;<span class=\"string\">&#x27;h&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>&#125;;</span><br><span class=\"line\">String str2=<span class=\"keyword\">new</span> String(ch);</span><br><span class=\"line\">str1.equals(str2);   <span class=\"comment\">//将会返回true</span></span><br><span class=\"line\">str1.equals(<span class=\"string\">&quot;hello&quot;</span>);   <span class=\"comment\">//返回true</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.equals(str2);   <span class=\"comment\">//返回true</span></span><br></pre></td></tr></table></figure>\n<p>2.equalsIgnoreCase(String str)方法<br>使用这个方法将会忽略字符串的大小写进行比较</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=&#123;<span class=\"string\">&#x27;h&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>&#125;;</span><br><span class=\"line\">String str2=<span class=\"keyword\">new</span> String(ch);</span><br><span class=\"line\">str1.equals(str2);   <span class=\"comment\">//将会返回false</span></span><br><span class=\"line\">str1.equalsIgnoreCase(str2)  <span class=\"comment\">//返回true</span></span><br></pre></td></tr></table></figure>\n<p>3.concat(String str)方法<br>使用concat方法可以拼接2个字符串，原字符串不变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">String str2=<span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\">String str3=str1.concat(str2);    <span class=\"comment\">//str3为helloworld</span></span><br></pre></td></tr></table></figure>\n<p>3.charAt(int index)方法<br>charAt方法可以找出字符串任何位置的字符，如果索引不合法将会出现异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str1=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch = str1.charAt(<span class=\"number\">1</span>);  <span class=\"comment\">//ch为e</span></span><br></pre></td></tr></table></figure>\n<p>4.indexOf(String str)方法<br>indexOf方法可以返回str在字符串中出现的第一个位置，没有将会返回-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str &#x3D; &quot;helloworld&quot;;</span><br><span class=\"line\">int index&#x3D;str.indexOf(&quot;llo&quot;);   &#x2F;&#x2F;index为2</span><br></pre></td></tr></table></figure>\n<p>5.subString(int index1,int index2)方法<br>subString方法可以获取原字符串从index1到index2-1的字串，如果只有一个参数，将默认index2为字符串的length</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str = <span class=\"string\">&quot;helloworld&quot;</span>;</span><br><span class=\"line\">String str1=str.subString(<span class=\"number\">5</span>);  <span class=\"comment\">//str1为world</span></span><br><span class=\"line\">String str2=str.subString(<span class=\"number\">4</span>,<span class=\"number\">7</span>);  <span class=\"comment\">//str2为owo</span></span><br></pre></td></tr></table></figure>\n<p>6.toCharArray()方法<br>toCharArray方法可以将字符串变成字符数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ch[]=str.toCharArray();  <span class=\"comment\">//ch[]=&#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>7.replace(String str1,String str2)方法<br>replace方法可以将字符串里值为str1的字符串替换成str2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str=<span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">String str1=str.replace(<span class=\"string\">&quot;l&quot;</span>,<span class=\"string\">&quot;#&quot;</span>);   <span class=\"comment\">//str1为he##o</span></span><br><span class=\"line\">String str2=str.replace(<span class=\"string\">&quot;el&quot;</span>,<span class=\"string\">&quot;&quot;</span>ss<span class=\"string\">&quot;);   //str2为hsslo</span></span><br></pre></td></tr></table></figure>\n<p>8.split(char ch)方法<br>split方法将会将字符串在ch处切割开成String数组,支持ch为空格</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str=<span class=\"string\">&quot;aaa,bbb,ccc&quot;</span>;</span><br><span class=\"line\">String s[]=str.split(<span class=\"string\">&quot;,&quot;</span>);   <span class=\"comment\">//s[]=&#123;&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串的注意事项\"><a href=\"#字符串的注意事项\" class=\"headerlink\" title=\"字符串的注意事项\"></a>字符串的注意事项</h2><ul>\n<li>字符串是常量</li>\n<li>字符串相当于char[]数组，但是在计算机底层是用byte[]数组实现的，因为字符使用ascii编码，在计算机底层翻译成数字储存在字节数组中</li>\n<li>当使用String直接赋值创建多个值相同的字符串时，实际上这几个字符串共用字符串常量池，即共用1个地址</li>\n<li>new出来的String字符串不在常量池中，所以new出来的字符串即使只相同地址也不同</li>\n<li>使用==比较时，基本数据类型比较的是值，而其他的比较的是地址<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java21.png\" width=600></div></li>\n<li>使用equals方法比较时，str.equals(str1)中，str不能为空字符串，否则会出现空指针异常</li>\n<li>字符串无论经过什么操作其都不会发生改变，给字符串赋其他值实际上是改变了字符串指向的地址</li>\n<li>split方法中的参数是正则表达式参数，如要使用.作为分隔符，必须要写出//.才行，否则不会进行切割</li>\n</ul>\n<h1 id=\"关于static\"><a href=\"#关于static\" class=\"headerlink\" title=\"关于static\"></a>关于static</h1><ul>\n<li>static是修饰类静态成员的关键字，而静态成员是直接属于类的，即使用类名可以直接调用静态成员，同时，它属于类的成员，也可以使用对象进行调用</li>\n<li>静态成员可以不创建对象而直接通过类调用</li>\n<li>在类的内部，静态成员可以直接使用省略前面的类名或者对象名</li>\n<li>静态方法不可以调用非静态成员<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        StaticDemo sd = <span class=\"keyword\">new</span> StaticDemo();</span><br><span class=\"line\">        StaticDemo.staticMethod();</span><br><span class=\"line\">        System.out.println(StaticDemo.count);</span><br><span class=\"line\">        System.out.println(sd.count);</span><br><span class=\"line\">        method1();</span><br><span class=\"line\">     <span class=\"comment\">//   method2();    //会报错</span></span><br><span class=\"line\">        System.out.println((staticNum));</span><br><span class=\"line\">        Test t=<span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">        System.out.println((t.num));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> staticNum=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;method2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>静态方法的执行优先于非静态方法</li>\n<li>静态代码块用于对静态成员的一次性赋值，静态代码块只执行一次，无论创建多少个对象都只执行一次，用法为：</li>\n<li>  static{<pre><code>  //静态代码块</code></pre>\n  }</li>\n</ul>\n<h1 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h1><p>Arrays类在java.util.Arrays包中，是对数组的辅助工具类</p>\n<h2 id=\"Arrays-toString\"><a href=\"#Arrays-toString\" class=\"headerlink\" title=\"Arrays.toString()\"></a>Arrays.toString()</h2><p>toString方法可以将数组变成字符串形式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] arr1=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">String StrArr1=Arrays.toString(arr1);        </span><br><span class=\"line\">System.out.println(Array.toString(strArr1));   <span class=\"comment\">//输出[1,2,3]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Arrays-sort\"><a href=\"#Arrays-sort\" class=\"headerlink\" title=\"Arrays.sort()\"></a>Arrays.sort()</h2><p>sort方法可以对数组进行升序排序，如果是数字则从小到大排列，如果是字母则按首字母字典序顺序排列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] strArr=&#123;<span class=\"string\">&quot;aaa&quot;</span>,<span class=\"string\">&quot;ccc&quot;</span>,<span class=\"string\">&quot;dd&quot;</span>,<span class=\"string\">&quot;bbb&quot;</span>&#125;;</span><br><span class=\"line\">Arrays.sort(strArr);</span><br><span class=\"line\">System.out.println(Arrays.toString(strArr));    <span class=\"comment\">//输出[aaa,bbb,ccc,dd]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"toCharArray\"><a href=\"#toCharArray\" class=\"headerlink\" title=\"toCharArray()\"></a>toCharArray()</h2><p>toCharArray方法可以将字符串转变为字符数组,用法为：Char []chStr=字符串名.toCharArray();</p>\n<h1 id=\"math类\"><a href=\"#math类\" class=\"headerlink\" title=\"math类\"></a>math类</h1><p>math类在java.util.Math包中，提供了许多有数学运算相关的方法</p>\n<h2 id=\"abs-方法\"><a href=\"#abs-方法\" class=\"headerlink\" title=\"abs()方法\"></a>abs()方法</h2><p>使用Math.abs(double num)可以获得num的绝对值，但是num本身不变</p>\n<h2 id=\"ceil-方法\"><a href=\"#ceil-方法\" class=\"headerlink\" title=\"ceil()方法\"></a>ceil()方法</h2><p>Math.ceil(double num)可以获取num的向上取整的浮点数，如num是3.1，则Math.ceil(3.1)为4.0</p>\n<h2 id=\"floor-方法\"><a href=\"#floor-方法\" class=\"headerlink\" title=\"floor()方法\"></a>floor()方法</h2><p>Math.floor(double num)方法为向下取整</p>\n<h2 id=\"round-方法\"><a href=\"#round-方法\" class=\"headerlink\" title=\"round()方法\"></a>round()方法</h2><p>Math.round(double num)方法可以对num进行四舍五入取整</p>\n",
            "tags": [
                "blog",
                "java学习",
                "java"
            ]
        },
        {
            "id": "http://yoursite.com/2020/10/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "url": "http://yoursite.com/2020/10/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%BA%8C)/",
            "title": "机器学习(二)",
            "date_published": "2020-10-12T12:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 简单线性回归 </font></center>\n\n<p>线性回归是机器学习中训练数据集的重要手段，首先是简单的线性回归，用到的代码和数据集：<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/studentscores.csv\">数据集</a>,<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/LR.py\">代码</a><br>数据集图示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c11.png\" width=200></div>\n## 导入库\n线性回归所使用到的库如下：\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import pandas as pd</span><br><span class=\"line\">import numpy as np    </span><br><span class=\"line\">import matplotlib.pyplot as plt</span><br><span class=\"line\">from sklearn.linear_model import LinearRegression</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入数据集-amp-amp-拆分数据集\"><a href=\"#导入数据集-amp-amp-拆分数据集\" class=\"headerlink\" title=\"导入数据集&amp;&amp;拆分数据集\"></a>导入数据集&amp;&amp;拆分数据集</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## 导入数据集</span></span><br><span class=\"line\">dataset = pd.read_csv(<span class=\"string\">&#x27;studentscores.csv&#x27;</span>)</span><br><span class=\"line\">X = dataset.iloc[ : , : <span class=\"number\">1</span> ].values</span><br><span class=\"line\">Y = dataset.iloc[ : , <span class=\"number\">1</span> ].values</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 拆分数据集</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\">X_train , X_test , Y_train , Y_test = train_test_split( X , Y , test_size = <span class=\"number\">1</span>/<span class=\"number\">4</span> , random_state = <span class=\"number\">0</span> )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用简单线性回归模型训练数据集\"><a href=\"#使用简单线性回归模型训练数据集\" class=\"headerlink\" title=\"使用简单线性回归模型训练数据集\"></a>使用简单线性回归模型训练数据集</h2><p>使用LinearRegression中的模型训练数据集</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regressor = LinearRegression()</span><br><span class=\"line\">regressor = regressor.fit( X_train , Y_train )</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预测训练结果\"><a href=\"#预测训练结果\" class=\"headerlink\" title=\"预测训练结果\"></a>预测训练结果</h2><p>使用LinearRegression库的predict函数预测训练结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Y_pred = regressor.predict( X_test )</span><br></pre></td></tr></table></figure>\n<p>预测的结果如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c10.png\" width=500></div>\n\n\n<h2 id=\"结果可视化\"><a href=\"#结果可视化\" class=\"headerlink\" title=\"结果可视化\"></a>结果可视化</h2><p>使用matplotlib中的pyplot库可以将训练的数据集转化为图表，使结果可视化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plt.scatter ( X_train , Y_train , color = <span class=\"string\">&#x27;red&#x27;</span> )</span><br><span class=\"line\">plt.plot ( X_train , regressor.predict(X_train) , color = <span class=\"string\">&#x27;blue&#x27;</span> )</span><br><span class=\"line\">plt.show() </span><br><span class=\"line\"></span><br><span class=\"line\">plt.scatter( X_test , Y_test ,color = <span class=\"string\">&#x27;red&#x27;</span> )</span><br><span class=\"line\">plt.plot( X_test , Y_test , color = <span class=\"string\">&#x27;blue&#x27;</span> )</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>训练集可视化图表为：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c8.png\" width=500 height=300></div>\n测试集可视化图表为：\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c9.png\" width=500 height=300></div>\n\n",
            "tags": [
                "blog",
                "机器学习"
            ]
        },
        {
            "id": "http://yoursite.com/2020/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "http://yoursite.com/2020/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "机器学习(一)",
            "date_published": "2020-10-05T12:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 数据预处理 </font></center>\n\n<p>数据处理可谓是机器学习的重中之重，接下来我所用到的数据集和代码如下：<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/Data.csv\">数据集</a>,<a href=\"https://github.com/sunyuzero/cdn/blob/master/csv/Data.py\">代码</a></p>\n<h2 id=\"导入库\"><a href=\"#导入库\" class=\"headerlink\" title=\"导入库\"></a>导入库</h2><p>首先需要导入python库函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##下面两个库都是机器学习最常用的2个库</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"comment\">## 以下的库是数据预处理需要的库</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.impute <span class=\"keyword\">import</span> SimpleImputer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> LabelEncoder, OneHotEncoder</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.compose <span class=\"keyword\">import</span> ColumnTransformer</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.model_selection <span class=\"keyword\">import</span> train_test_split</span><br><span class=\"line\"><span class=\"keyword\">from</span> sklearn.preprocessing <span class=\"keyword\">import</span> StandardScaler</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入数据集\"><a href=\"#导入数据集\" class=\"headerlink\" title=\"导入数据集\"></a>导入数据集</h2><p>原本的数据集为：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c1.png\" width=400></div>\n然后开始经过以下处理：\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataset = pd.read_csv(<span class=\"string\">&#x27;Data.csv&#x27;</span>)     <span class=\"comment\">##导入数据集,注意是相对路径</span></span><br><span class=\"line\">X = dataset.iloc[ : , : <span class=\"number\">-1</span> ].values    <span class=\"comment\">## X一直取数据集的最后一列（除了最后一列）</span></span><br><span class=\"line\">Y = dataset.iloc[ : , <span class=\"number\">3</span> ].values    <span class=\"comment\">## Y取第4列</span></span><br></pre></td></tr></table></figure>\n其中X为：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c2.png\" width=200></div>\nY为：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c3.png\" width=200></div>\n\n<h2 id=\"处理丢失数据\"><a href=\"#处理丢失数据\" class=\"headerlink\" title=\"处理丢失数据\"></a>处理丢失数据</h2><p>很多时候，我们得到的数据集中会有数据丢失的部分，通过以下处理，在丢失数据的部分给与平均值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imputer = SimpleImputer(missing_values = np.nan, strategy = <span class=\"string\">&quot;mean&quot;</span>)</span><br><span class=\"line\">imputer = imputer.fit(X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br><span class=\"line\">X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>] = imputer.transform(X[ : , <span class=\"number\">1</span>:<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n<p>处理后的X如下，我们可以发现空白的部分被填上了平均值：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c4.png\" width=200></div>\n\n<h2 id=\"数据分类\"><a href=\"#数据分类\" class=\"headerlink\" title=\"数据分类\"></a>数据分类</h2><p>将数据集中的数据进行分类，相同的数字代表同一类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">labelencoder_X = LabelEncoder()</span><br><span class=\"line\">labelencoder_Y = LabelEncoder()</span><br><span class=\"line\"></span><br><span class=\"line\">X[ : , <span class=\"number\">0</span>] = labelencoder_X.fit_transform(X[ : , <span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">ct1 = ColumnTransformer([(<span class=\"string\">&quot;country&quot;</span> , OneHotEncoder() , [<span class=\"number\">1</span>])], <span class=\"string\">&#x27;drop&#x27;</span>)</span><br><span class=\"line\">ct2 = ColumnTransformer([(<span class=\"string\">&quot;country&quot;</span> , OneHotEncoder() , [<span class=\"number\">1</span>])], <span class=\"string\">&#x27;drop&#x27;</span>)</span><br><span class=\"line\">X = ct1.fit_transform(X).toarray()</span><br><span class=\"line\">Y = labelencoder_Y.fit_transform(Y)</span><br><span class=\"line\">```  </span><br><span class=\"line\">处理后的X如下，我们可以发现数据集都变成了数字，其中相同的类别数字相同：</span><br><span class=\"line\">&lt;div aligh=center&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c5.png&quot; width=200&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## 拆分数据集</span></span><br><span class=\"line\">用train_test_split拆分数据集，其中test_size表示测试集所占数据集的比例</span><br><span class=\"line\">```python</span><br><span class=\"line\">X_train , X_test , Y_train , Y_test = train_test_split( X , Y , test_size = <span class=\"number\">0.2</span> , random_state = <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>处理后的X_train（训练集）如下，占80%：</p>\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c6.png\" width=200></div>\nX_test（数据集）如下，占20%：\n<div aligh=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/py/c7.png\" width=200></div>\n\n<h2 id=\"特征量化\"><a href=\"#特征量化\" class=\"headerlink\" title=\"特征量化\"></a>特征量化</h2><p>用特征标准化或Z值归一化实现特征量化，解决其他模型算法的特征在幅度，单位和范围姿态问题上变化很大的问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sc_X = StandardScaler()</span><br><span class=\"line\">X_train = sc_X.fit_transform(X_train)</span><br><span class=\"line\">X_test = sc_X.transform(X_test)</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "机器学习"
            ]
        },
        {
            "id": "http://yoursite.com/2020/10/01/java%E7%AC%94%E8%AE%B0/",
            "url": "http://yoursite.com/2020/10/01/java%E7%AC%94%E8%AE%B0/",
            "title": "java学习笔记（一）",
            "date_published": "2020-10-01T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java基本概念 </font></center>\n\n<h1 id=\"JVM-JRE与JDK\"><a href=\"#JVM-JRE与JDK\" class=\"headerlink\" title=\"JVM,JRE与JDK\"></a>JVM,JRE与JDK</h1><p>java语言有一个非常显著的特征就是跨平台性，无论在什么操作系统上，java程序都能够运行，这就得益于java的JVM。</p>\n<ul>\n<li>JVM<br>&emsp;java虚拟机，简称JVM(java virtual machine），是运行java程序的假想计算机，是java程序的运行环境，我们编写的java代码，都运行在JVM上。<br>&emsp;JVM为什么能使java具有跨平台性呢？原因就在于每个操作系统都具有一个不同的JVM，这些JVM充当了java程序与操作系统之间的中介，java程序直接运行在JVM中，形成的字节码在转运到操作系统，使得java程序在不同平台不需要重新编译，具有跨平台性。<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java1.png\" width=600></div></li>\n<li>JRE与JDK<br>&emsp;JRE(Java Runtime Environment），是java程序运行时所需的环境，包括JVM和运行时所需要的核心类库，如果只需要运行java程序的话，那么只需要JRE即可。<br>&emsp;JDK(Java Development Kit），是java程序开发的工具包，包括JRE和开发人员使用的工具，如果需要开发java程序，那么就需要安装JDK了。<br>&emsp;这三者的关系是JDK&gt;JRE&gt;JVM，如下图所示<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java2.png\" width=600></div>\n\n</li>\n</ul>\n<h1 id=\"用cmd运行java程序\"><a href=\"#用cmd运行java程序\" class=\"headerlink\" title=\"用cmd运行java程序\"></a>用cmd运行java程序</h1><p>首先将cmd定位在java程序所在的文件夹中，然后依次使用javac命令和java命令，javac是对java程序进行编译成class字节码，java命令则是运行编译好的class文件，具体操作如下图所示，其中Test.java是我已经编写好的程序</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java3.png\" width=600></div>\n\n<h1 id=\"java程序的注释\"><a href=\"#java程序的注释\" class=\"headerlink\" title=\"java程序的注释\"></a>java程序的注释</h1><p>java程序的注释与c++类似，有2种注释方法：单行注释和多行注释<br>单行注释：//注释内容，//之后的内容将被计算机忽略<br>多行注释：/* 注释内容，/* */之间的内容将被计算机忽略，可以跨行 */ </p>\n<h1 id=\"java关键字和标识符的命名规范\"><a href=\"#java关键字和标识符的命名规范\" class=\"headerlink\" title=\"java关键字和标识符的命名规范\"></a>java关键字和标识符的命名规范</h1><p>&emsp;和c++语言类似，java也有预先定义的关键字，这些关键字都是全小写，都有特定含义，变量名和类名等都不能与关键字相同。java区分大小写，所以，命名时可以使用标识符的大写，但不建议。<br>&emsp;标识符就是我们自己定义的内容的名称，标识符可以包含英文字母，数字，美元符号$和下划线_,但标识符不能以数字开头<br>建议标识符的命名规范：</p>\n<ul>\n<li>类名规范：首字母大写，后面每个单词的首字母大写（大驼峰式）</li>\n<li>变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）</li>\n<li>方法名规范：同变量名</li>\n</ul>\n<h1 id=\"常量与变量\"><a href=\"#常量与变量\" class=\"headerlink\" title=\"常量与变量\"></a>常量与变量</h1><ul>\n<li><font face=\"黑体\" size=5>1.常量分为字符串常量，整数常量，浮点数常量，字符常量，布尔常量，空常量，用const修饰</font><br>字符串常量：String，以’\\0’结束，如”abc”,”123”,占n+1个字节，其中n为组成字符串的字符个数。<br>整数常量：short（2字节），int（4字节），long（8字节）<br>浮点数常量：float（4字节），double（8字节）<br>字符常量：char（1字节）<br>布尔常量：bool（1字节）<br>空常量：null（0字节）</li>\n<li><font face=\"黑体\" size=5>2.变量，即可以改变的常量，没有const修饰的常量，其类型与常量相同</font><br>变量的使用注意事项：</li>\n<li>如果创建多个变量，变量名不可以重复</li>\n<li>对于float和long类型，字母后缀的F和L不要去掉</li>\n<li>如果使用byte和short类型的变量，右侧的数据值不要超过左侧类型的范围</li>\n<li>一定要对变量赋值后才能使用</li>\n<li>变量使用不能超过作用域</li>\n</ul>\n<h1 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h1><ul>\n<li>自动类型转换，数据类型从小到大，将会自动发生类型转换。</li>\n<li>强制类型转换，当数据类型从大到小，则需要强制转换，不能自动完成,可能会发生精度损失<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自动转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> b=a;  <span class=\"comment\">//从int到long，自动转换</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> c=<span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> d=c;  <span class=\"comment\">//从float到double，自动转换</span></span><br><span class=\"line\"><span class=\"comment\">//强制转换</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">100L</span>; <span class=\"comment\">//会报错，int无法自动转换为long</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = (<span class=\"keyword\">int</span>)<span class=\"number\">100L</span>;  <span class=\"comment\">//正确，实现了强制转换</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> s=<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">a=(<span class=\"keyword\">int</span>)s;   <span class=\"comment\">//正确，将字符串强制转化成int整数,将会输出a的ASCII码</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h1 id=\"ASCII码表\"><a href=\"#ASCII码表\" class=\"headerlink\" title=\"ASCII码表\"></a>ASCII码表</h1><p>ASCII是使用7位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，基本上所有的计算机语言都会用到ASCII码进行编码，JAVA也是如此，只不过java也是使用了Unicode编码，把ASCII码表放在这里便于查看</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java4.jpg\" width=600></div>\n\n<h1 id=\"java编译器的一些优化\"><a href=\"#java编译器的一些优化\" class=\"headerlink\" title=\"java编译器的一些优化\"></a>java编译器的一些优化</h1><ul>\n<li>对于byte，short，char三种类型，如果右侧赋值的数据大小没有超过范围，那么java编译器会自动加上（byte），（short），（char），例如：<br>byte a = 30 &lt;==&gt; byte a = (byte) 30</li>\n<li>但是，当右侧赋值的数据大小超过范围后，java编译器则会直接报错</li>\n<li>java中的加法默认将加数当作int数据类型，所以使用2个short类型的变量相加赋予另一个short类型时，编译器会报错，但是当short类型的右边赋予的是两个常量相加，那么编译器不会报错，而是会直接先将常量相加直接赋予short：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">short</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> b=<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> c=a+b;   <span class=\"comment\">//会报错</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> c=<span class=\"number\">10</span>+<span class=\"number\">20</span>;  <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n报错原因：<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java5.png\" width=600></div>\n\n\n</li>\n</ul>\n<h1 id=\"jshell的使用\"><a href=\"#jshell的使用\" class=\"headerlink\" title=\"jshell的使用\"></a>jshell的使用</h1><p>jshell是java的交互式运行环境，类似于python的命令行的交互式运行环境，直接在命令提示符中输入jshell进入Java交互环境，之后直接输入一条java语句，便能直接输出语句结果，注意jshell中的语句不用以分号结尾。</p>\n<h1 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h1><p>1.if语句<br>在Java程序中，如果要根据条件来决定是否执行某一段代码，就需要if语句。根据if的计算结果（true还是false），JVM决定是否执行if语句块（即花括号{}包含的所有语句）。</p>\n<p>2.除了if语句外，还有一种条件判断，是根据某个表达式的结果，分别去执行不同的分支。switch语句根据switch (表达式)计算的结果，跳转到匹配的case结果，然后继续执行后续语句，直到遇到break结束执行。switch语句的基本语法是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (option) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=1时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=2时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option=3时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"comment\">// option都不符合时执行语句</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h1><p>循环语句就是让计算机根据条件做循环计算，在条件满足时继续循环，条件不满足时退出循环。<br>除了for，while外，Java还提供了一种for each循环，它可以更简单地遍历数组，和for循环相比，for each循环的变量n不再是计数器，而是直接对应到数组的每个元素。但是，for each循环无法指定遍历顺序，也无法获取数组的索引。它的用法如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] ns = &#123; <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : ns) &#123;</span><br><span class=\"line\">   System.out.println(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"break和continue\"><a href=\"#break和continue\" class=\"headerlink\" title=\"break和continue\"></a>break和continue</h2><h2 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h2><p>在循环过程中，可以使用break语句跳出当前循环，break会跳出当前循环，当有多个嵌套的循环时，break只能跳出最内层的循环，然后剩下的循环都不会执行了。</p>\n<h2 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h2><p>continue是提前结束本次循环，直接继续执行下次循环,在多层嵌套的循环中，continue语句同样是结束本次自己所在的循环。比如算从1-100的奇数的和时用continue就会很方便：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">100</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i==<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    sum+=i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"方法的注意事项\"><a href=\"#方法的注意事项\" class=\"headerlink\" title=\"方法的注意事项\"></a>方法的注意事项</h2><ul>\n<li>方法必须定义在类中，且不能在方法中再定义方法</li>\n<li>方法定义的前后顺序无所谓</li>\n<li>如果方法有返回值，那么必须加上return返回值，不能没有</li>\n<li>对于void方法，不能return加返回值，只能直接return；</li>\n<li>一个方法可以有多个return语句，但是必须保证能执行的只有一个 </li>\n</ul>\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法，这种方法名相同，但各自的参数不同，称为方法重载（Overload），方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。<br>例如，String类提供了多个重载方法indexOf()，可以查找子串：</p>\n<ul>\n<li>int indexOf(int ch)：根据字符的Unicode码查找；</li>\n<li>int indexOf(String str)：根据字符串查找；</li>\n<li>int indexOf(int ch, int fromIndex)：根据字符查找，但指定起始位置；</li>\n<li>int indexOf(String str, int fromIndex)根据字符串查找，但指定起始位置。</li>\n</ul>\n<h2 id=\"重载的注意事项\"><a href=\"#重载的注意事项\" class=\"headerlink\" title=\"重载的注意事项\"></a>重载的注意事项</h2><p>1.方法的重载与下列因素相关：</p>\n<ul>\n<li>参数的个数不同</li>\n<li>参数的类型不同</li>\n<li>参数的多类型顺序不同</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\">puclic <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上正确，都能构成重载</span></span><br></pre></td></tr></table></figure>\n\n<p>2.方法的重载与下列因素无关：</p>\n<ul>\n<li>与参数的名称无关</li>\n<li>与方法的返回值类型无关</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sun</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上不能构成重载会报错，因为与方法参数的名称无关</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上也不能构成重载会报错，因为与方法的返回类型无关</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>定义一个数组类型的变量，使用数组类型“类型[]”，有以下几种创建方法:</p>\n<ul>\n<li>int[] a={1,2,3,4,5};    //根据{}之间的元素个数自动创建</li>\n<li>int[] a=new int{1,2,3,4,5}  //同上</li>\n<li>int[] a=new int[5];a={1,2,3,4,5};    //先创建容量为5的数组，再赋值</li>\n</ul>\n<h2 id=\"数组的内存\"><a href=\"#数组的内存\" class=\"headerlink\" title=\"数组的内存\"></a>数组的内存</h2><p>1.当动态创建一个数组时，系统将会在栈区先写入数组名称，然后在堆区开辟空间存放数组元素，其中数组的索引也是存放在栈区的，当你要修改数组元素的值时，你首先将访问栈区的索引，然后这个索引再指向堆区对应的内存，如下图所示:</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java7.png\" width=600></div>\n\n<p>2.当一个数组赋值给另一个数组时：int[] arrayB = arrayA;这时候是将arrayA的地址直接赋值给arrayB了，此时arrayA和arrayB共用一个内存，本质上时同一个数组，其内存分配如下所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java8.png\" width=600></div>\n\n<h2 id=\"数组注意事项：\"><a href=\"#数组注意事项：\" class=\"headerlink\" title=\"数组注意事项：\"></a>数组注意事项：</h2><ul>\n<li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；</li>\n<li>要访问数组中的某一个元素，需要使用索引。数组索引从0开始</li>\n<li>可以修改数组中的某一个元素，使用赋值语句</li>\n<li>可以用数组变量.length获取数组大小</li>\n<li>数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错</li>\n<li>直接输出数组名称将会得到数组的首地址</li>\n<li>数组的2个异常：超出数组索引(ArrayIndexOutOfBoundsException),空指针异常(NullPointerException):创建一个空数组时访问数组元素将会出现空指针异常</li>\n</ul>\n<h2 id=\"数组的使用\"><a href=\"#数组的使用\" class=\"headerlink\" title=\"数组的使用\"></a>数组的使用</h2><p>1.简单遍历输出<br>由于java提供了获取数组长度的方法（array.length），所以对于数组的遍历非常方便：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(array[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.查找数组最大值<br>以最大值为例，只需要用一个变量记录首元素，在遍历数组时，每次比较得出最大值更新这个变量即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array=&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> max=array[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;array.length;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(max&lt;array[i]) max=array[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;最大值为：&quot;</span>+max);</span><br></pre></td></tr></table></figure>\n<p>3.数组的排序<br>对数组的排序中，常用的排序算法有冒泡排序、插入排序和快速排序等。以冒泡排序为例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ns.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; ns.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ns[j] &gt; ns[j+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmp = ns[j];</span><br><span class=\"line\">        ns[j] = ns[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        ns[j+<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在java中，其标准库内已经内置了排序功能，我们也可以对它直接进行调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ns = &#123; <span class=\"number\">28</span>, <span class=\"number\">12</span>, <span class=\"number\">89</span>, <span class=\"number\">73</span>, <span class=\"number\">65</span>, <span class=\"number\">18</span>, <span class=\"number\">96</span>, <span class=\"number\">50</span>, <span class=\"number\">8</span>, <span class=\"number\">36</span> &#125;;</span><br><span class=\"line\">        Arrays.sort(ns);</span><br><span class=\"line\">        System.out.println(Arrays.toString(ns));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h1><p>二维数组可以理解为在一个数组中再定义数组，例如：</p>\n<pre><code>int[][] ns = &#123;\n        &#123; 1, 2, 3, 4 &#125;,\n        &#123; 5, 6, 7, 8 &#125;,\n        &#123; 9, 10, 11, 12 &#125;\n    &#125;;</code></pre>\n<p>因为ns包含3个数组，所以ns的长度为3</p>\n<h2 id=\"二维数组的内存\"><a href=\"#二维数组的内存\" class=\"headerlink\" title=\"二维数组的内存\"></a>二维数组的内存</h2><p>二维数组在系统中的内存占用如下：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java9.png\" width=500></div>\n\n<h2 id=\"打印二维数组\"><a href=\"#打印二维数组\" class=\"headerlink\" title=\"打印二维数组\"></a>打印二维数组</h2><p>打印二维数组可以用两层嵌套循环：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] arr : ns) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n : arr) &#123;</span><br><span class=\"line\">        System.out.print(n);</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&#x27;, &#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>也可以直接使用Java标准库的Arrays.deepToString()直接打印二维数组。</p>\n",
            "tags": [
                "blog",
                "java学习",
                "java"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/23/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/",
            "url": "http://yoursite.com/2020/09/23/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/",
            "title": "算法学习",
            "date_published": "2020-09-23T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 算法学习 </font></center>\n\n<h1 id=\"getchar和putchar\"><a href=\"#getchar和putchar\" class=\"headerlink\" title=\"getchar和putchar\"></a>getchar和putchar</h1><p>getchar用于输入单个字符，putchar用于输出单个字符</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\">c=getchar();</span><br><span class=\"line\"><span class=\"built_in\">putchar</span>(c);</span><br></pre></td></tr></table></figure>\n<h1 id=\"常见的math函数\"><a href=\"#常见的math函数\" class=\"headerlink\" title=\"常见的math函数\"></a>常见的math函数</h1><p>使用math内置函数需要添加头文件<cmath></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">fabs</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//取x的绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">floor</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//向上取整</span></span><br><span class=\"line\"><span class=\"built_in\">ceil</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"keyword\">double</span> r,<span class=\"keyword\">double</span> p) <span class=\"comment\">//返回r的p次方</span></span><br><span class=\"line\"><span class=\"built_in\">sqrt</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回x的算术平方根</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回ln(x)</span></span><br><span class=\"line\"><span class=\"built_in\">sin</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回正弦值，要求x为弧度制</span></span><br><span class=\"line\"><span class=\"built_in\">acos</span>(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//返回反余弦值，pi=acos(-1);</span></span><br><span class=\"line\">round(<span class=\"keyword\">double</span> x);  <span class=\"comment\">//对x进行四舍五入取整</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"memset函数\"><a href=\"#memset函数\" class=\"headerlink\" title=\"memset函数\"></a>memset函数</h1><p>memset用于对数组中的每一个元素赋予相同的值（0或-1）,下面的这个函数即是对数组a的元素全部赋予0的操作<br>memset(a,0,sizeof(a));</p>\n<h1 id=\"对字符数组的输入输出\"><a href=\"#对字符数组的输入输出\" class=\"headerlink\" title=\"对字符数组的输入输出\"></a>对字符数组的输入输出</h1><h2 id=\"scanf和printf\"><a href=\"#scanf和printf\" class=\"headerlink\" title=\"scanf和printf\"></a>scanf和printf</h2><p>scanf(“%c”,&amp;c)用于输入单个字符,scanf(“%s”,s)用于输入字符数组，%s识别空格作为字符串的结尾</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);   <span class=\"comment\">//输入TAT TAT</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);  <span class=\"comment\">//输出TAT</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"gets和puts\"><a href=\"#gets和puts\" class=\"headerlink\" title=\"gets和puts\"></a>gets和puts</h2><p>gets用于输入一行字符串，以’\\n’作为识别结尾,puts用于输出一行字符串并自动换行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str);</span><br></pre></td></tr></table></figure>\n<h1 id=\"cstring的使用\"><a href=\"#cstring的使用\" class=\"headerlink\" title=\"cstring的使用\"></a>cstring的使用</h1><p>使用string类的内置函数需要包含头文件<cstring></p>\n<h2 id=\"strlen\"><a href=\"#strlen\" class=\"headerlink\" title=\"strlen()\"></a>strlen()</h2><p>strlen()函数用于获取字符串的长度</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str)</span><br><span class=\"line\"><span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(str);  <span class=\"comment\">//获取字符串的长度</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcmp\"><a href=\"#strcmp\" class=\"headerlink\" title=\"strcmp()\"></a>strcmp()</h2><p>strcmp(str1,str2)函数用于比较2个字符串的大小（按照字典序），返回一个整数，若str1&gt;str2，则返回一个正整数，若str1&lt;str2，则返回一个负整数,若str1=str2,则返回0。示例如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">10</span>],str2[<span class=\"number\">10</span>];</span><br><span class=\"line\">gets(str1);    <span class=\"comment\">//Dear</span></span><br><span class=\"line\">gets(str2);       <span class=\"comment\">//Cat</span></span><br><span class=\"line\"><span class=\"built_in\">strcmp</span>(str1,str2)  <span class=\"comment\">//返回一个正整数</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcpy\"><a href=\"#strcpy\" class=\"headerlink\" title=\"strcpy()\"></a>strcpy()</h2><p>strcpy(str1,str2)函数可以把str2复制给str1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">50</span>],str2[<span class=\"number\">50</span>];</span><br><span class=\"line\">gets(str1);   <span class=\"comment\">//Hello</span></span><br><span class=\"line\">gets(str2);   <span class=\"comment\">//World</span></span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(str1,str2);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str1);   <span class=\"comment\">//World</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"strcat\"><a href=\"#strcat\" class=\"headerlink\" title=\"strcat()\"></a>strcat()</h2><p>strcat(str1,str2)函数可以将str2接到str1后面</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">50</span>],str2[<span class=\"number\">50</span>];</span><br><span class=\"line\">gets(str1);   <span class=\"comment\">//Hello</span></span><br><span class=\"line\">gets(str2);   <span class=\"comment\">//World</span></span><br><span class=\"line\"><span class=\"built_in\">strcat</span>(str1,str2);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(str1);   <span class=\"comment\">//HelloWorld</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"sscanf和sprintf\"><a href=\"#sscanf和sprintf\" class=\"headerlink\" title=\"sscanf和sprintf\"></a>sscanf和sprintf</h1><p>sscanf和sprintf是处理字符串的利器，可以理解为string+scanf(printf),其基本格式为：sscanf(str,”%d”,&amp;n);sprinf(str,”%d”,n);</p>\n<h2 id=\"简单用法\"><a href=\"#简单用法\" class=\"headerlink\" title=\"简单用法\"></a>简单用法</h2><p>sscanf的用法是把字符数组str里的内容以”%d”的格式写入n中，而sprintf是把n的内容写入str中，示例如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50</span>],str1[<span class=\"number\">50</span>]=<span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m=<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">sscanf</span>(str1,<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(str,<span class=\"string\">&quot;%d&quot;</span>,m);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%s&quot;</span>,n,str);   <span class=\"comment\">//n=123,str=&#x27;100&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"进阶用法\"><a href=\"#进阶用法\" class=\"headerlink\" title=\"进阶用法\"></a>进阶用法</h2><p>不仅如此，sscanf和sprintf还可以进行复杂的输入输出，如下列代码所示</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n;<span class=\"keyword\">double</span> db;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50</span>],str1[<span class=\"number\">50</span>]=<span class=\"string\">&quot;2020:3.14,sscanf&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">sscanf</span>(str1,<span class=\"string\">&quot;%d:%lf,%s&quot;</span>,&amp;n,&amp;db,&amp;str);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n%.2f\\n%s\\n&quot;</span>,n,db,str);    <span class=\"comment\">//n=2020,db=3.14,str=sscanf</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> b=<span class=\"number\">2020</span>;<span class=\"keyword\">double</span> db=<span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">100</span>],str1[<span class=\"number\">100</span>]=<span class=\"string\">&quot;sprintf&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">sprintf</span>(str,<span class=\"string\">&quot;%d:%.2f,%s&quot;</span>,b,db,str1);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>,str);     <span class=\"comment\">//str=2020:3.14,sprintf</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "blog",
                "学习经验",
                "算法"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/19/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "url": "http://yoursite.com/2020/09/19/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "title": "BFS学习",
            "date_published": "2020-09-19T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> BFS学习 </font></center>\nBFS，广度优先搜索，也称深度优先搜索，即搜索每次可达的所有点并进行标记，直到搜索范围覆盖所需要寻找的点。下面我们从迷宫搜索来看看DFS的应用。\n\n<h2 id=\"迷宫搜索\"><a href=\"#迷宫搜索\" class=\"headerlink\" title=\"迷宫搜索\"></a>迷宫搜索</h2><p>寻找迷宫中从起点到终点的最短可行路径。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用二维数组记录迷宫，并标记迷宫的障碍点，再通过DFS找出最短路径。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">note</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> next[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;</span><br><span class=\"line\">    &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">note</span> <span class=\"title\">que</span>[2501];</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;m,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;j++)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]); </span><br><span class=\"line\">    <span class=\"keyword\">int</span> startX,startY,endX,endY,tx,ty;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;startX,&amp;startY,&amp;endX,&amp;endY);</span><br><span class=\"line\">    book[startX][startY]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flag=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">1</span>,tail=<span class=\"number\">2</span>;</span><br><span class=\"line\">    que[head].x=startX;que[head].y=startY;</span><br><span class=\"line\">    que[head].f=<span class=\"number\">0</span>;que[head].s=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(head&lt;tail)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">4</span>;i++)&#123;</span><br><span class=\"line\">            tx=que[head].x+next[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">            ty=que[head].y+next[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tx&lt;<span class=\"number\">1</span>||tx&gt;m||ty&lt;<span class=\"number\">1</span>||ty&gt;n)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[tx][ty]==<span class=\"number\">0</span>&amp;&amp;book[tx][ty]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                book[tx][ty]=<span class=\"number\">1</span>;</span><br><span class=\"line\">                que[tail].x=tx;</span><br><span class=\"line\">                que[tail].y=ty;</span><br><span class=\"line\">                que[tail].f=head;</span><br><span class=\"line\">                que[tail].s=que[head].s+<span class=\"number\">1</span>;</span><br><span class=\"line\">                tail++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(que[tail].x==endX&amp;&amp;que[tail].y==endY)&#123;</span><br><span class=\"line\">                flag=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag==<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        head++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,que[tail<span class=\"number\">-1</span>].s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "blog",
                "学习经验",
                "BFS"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/16/csp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "http://yoursite.com/2020/09/16/csp%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "csp初体验",
            "date_published": "2020-09-16T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 2020CSP第二场 </font></center>\n\n<p>趁着学校报团免费参加了2020csp第二场，被血虐而归。前2题属于签到题，题目本身并不难，主要是要慢慢分析。由于太弱，只能带来前2题的题解。</p>\n<h2 id=\"第一题题目大意\"><a href=\"#第一题题目大意\" class=\"headerlink\" title=\"第一题题目大意\"></a>第一题题目大意</h2><p>给定一个点，要求从输入众多的点中找出距离该点最近的3个点并依次输出编号。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这个题用数组记录然后排序会有点麻烦，因为可能存在距离相同的点。最简单的方式是直接搜索3次，每次找出最近的点。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,x,y,x1,y1;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;x&gt;&gt;y;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[n]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;x1&gt;&gt;y1;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=(x-x1)*(x-x1)+(y-y1)*(y-y1);</span><br><span class=\"line\">        a[i]=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p&lt;<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">10000000</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) ans=min(ans,a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p&gt;=<span class=\"number\">3</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==ans)&#123;</span><br><span class=\"line\">                <span class=\"built_in\">cout</span>&lt;&lt;i+<span class=\"number\">1</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">                p++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i]==ans)&#123;</span><br><span class=\"line\">                a[i]=<span class=\"number\">10000000</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第二题题目大意\"><a href=\"#第二题题目大意\" class=\"headerlink\" title=\"第二题题目大意\"></a>第二题题目大意</h2><p>给定一连串的点的位置以代替行走路径，以及给定区域，判断行走路径是否经过该区域并且判断其是否在区域内逗留（即大于k个点在此区域中）</p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>用2个数组分别记录点的横坐标和纵坐标，判断点是否在区域内，用变量记录即可。</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,t,x1,y1,x2,y2;</span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;t&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;<span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>,p1=<span class=\"number\">0</span>,p3=<span class=\"number\">0</span>,p4=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[t]=&#123;<span class=\"number\">0</span>&#125;,b[t]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p1=<span class=\"number\">0</span>;ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">cin</span>&gt;&gt;a[j]&gt;&gt;b[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;t;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> p2=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[j]&gt;=x1&amp;&amp;a[j]&lt;=x2&amp;&amp;b[j]&gt;=y1&amp;&amp;b[j]&lt;=y2)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                p1++;p2++;j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans=max(ans,p2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p1) p3++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&gt;=k) p4++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;p3&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;p4&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "学习经验",
                "比赛"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "url": "http://yoursite.com/2020/09/11/%E7%BA%BF%E6%80%A7%E8%A1%A8/",
            "title": "线性表",
            "date_published": "2020-09-11T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 线性表学习 </font></center>\n\n<h1 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h1><p>顺序表，即线性表的顺序存储结构，采用结构体类型SqList表示为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sqList</span>&#123;</span></span><br><span class=\"line\">    ElementType data[maxSize];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"顺序表的实现\"><a href=\"#顺序表的实现\" class=\"headerlink\" title=\"顺序表的实现\"></a>顺序表的实现</h2><h3 id=\"建立顺序表\"><a href=\"#建立顺序表\" class=\"headerlink\" title=\"建立顺序表\"></a>建立顺序表</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqList *L=(sqList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(sqList));</span><br><span class=\"line\">L-&gt;length=<span class=\"number\">0</span>;<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(i&lt;n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;L-&gt;data[i]);    </span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找顺序表数据位置\"><a href=\"#查找顺序表数据位置\" class=\"headerlink\" title=\"查找顺序表数据位置\"></a>查找顺序表数据位置</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">search</span><span class=\"params\">(sqList* L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length&amp;&amp;L-&gt;data[i]！=e)</span><br><span class=\"line\">    i++;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i&gt;L-length) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> i+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据元素\"><a href=\"#插入数据元素\" class=\"headerlink\" title=\"插入数据元素\"></a>插入数据元素</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sert</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=L-&gt;length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&gt;i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        L-&gt;data[j]=L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;data[i<span class=\"number\">-1</span>]=e;</span><br><span class=\"line\">    L-&gt;length++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除顺序表\"><a href=\"#删除顺序表\" class=\"headerlink\" title=\"删除顺序表\"></a>删除顺序表</h3><p>free(L);</p>\n<h2 id=\"顺序表的应用\"><a href=\"#顺序表的应用\" class=\"headerlink\" title=\"顺序表的应用\"></a>顺序表的应用</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个顺序表，删除其中所有值等于x的元素，要求时间复杂度O(N),空间复杂度O(1)</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteX</span><span class=\"params\">(sqList *L,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;L-&gt;length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(L-&gt;data[i]==x) i++;</span><br><span class=\"line\">        L-&gt;data[k]=L-&gt;data[i];</span><br><span class=\"line\">        k++;i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    L-&gt;length=k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;L-&gt;length;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,L-&gt;data[i]);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h1><p>链表，即线性表的链式存储结构，采用结构体的表示方式为：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nodeList</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    nodeList *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的实现\"><a href=\"#链表的实现\" class=\"headerlink\" title=\"链表的实现\"></a>链表的实现</h2><h3 id=\"链表的建立\"><a href=\"#链表的建立\" class=\"headerlink\" title=\"链表的建立\"></a>链表的建立</h3><p>1.头插法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *p,*q;</span><br><span class=\"line\">p=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    q-&gt;next=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.尾插法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nodeList *head,*p,*q;</span><br><span class=\"line\">head=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">p=head;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    q=(nodeList *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">    q-&gt;data=x;</span><br><span class=\"line\">    p-&gt;next=q;</span><br><span class=\"line\">    p=q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p-&gt;next=<span class=\"literal\">NULL</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表的插入元素与删除元素\"><a href=\"#链表的插入元素与删除元素\" class=\"headerlink\" title=\"链表的插入元素与删除元素\"></a>链表的插入元素与删除元素</h3><p>1.插入元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sertElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *p=L;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j&lt;i&amp;&amp;p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        nodeList *s=(nodeList*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(nodeList));</span><br><span class=\"line\">        s-&gt;data=e;</span><br><span class=\"line\">        s-&gt;next=p-&gt;next;</span><br><span class=\"line\">        p-&gt;next=s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.删除元素</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteElement</span><span class=\"params\">(nodeList *L,<span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nodeList *p=L,*q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p!=<span class=\"literal\">NULL</span>&amp;&amp;p-&gt;data!=e)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=p-&gt;next;    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    q=p-&gt;next;</span><br><span class=\"line\">    p-&gt;next=p-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链表的删除\"><a href=\"#链表的删除\" class=\"headerlink\" title=\"链表的删除\"></a>链表的删除</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">freeList</span><span class=\"params\">(nodeList *L)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q=L,*p=L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">        q=p;</span><br><span class=\"line\">        p=q-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链表的应用\"><a href=\"#链表的应用\" class=\"headerlink\" title=\"链表的应用\"></a>链表的应用</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个链表，设计一个算法使其元素递增。</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sortList</span><span class=\"params\">(nodeList *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    nodeList *q,*p,*s;</span><br><span class=\"line\">    q=head-&gt;next;p=head-&gt;next-&gt;next;</span><br><span class=\"line\">    s=head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q-&gt;data&gt;=p-&gt;data)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p=p-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        q-&gt;next=p-&gt;next;p-&gt;next=q;</span><br><span class=\"line\">        p=head-&gt;next;</span><br><span class=\"line\">        q=q-&gt;next</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习经验",
                "数据结构"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/03/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "url": "http://yoursite.com/2020/09/03/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/",
            "title": "初探DFS",
            "date_published": "2020-09-03T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> DFS入门 </font></center>\n\n<a id=\"more\"></a>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><p>DFS，即深度优先搜索，是最重要的搜索思想之一，其核心在于解决当下问题，而下一步的做法和当前一样。其基本模型如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    判断边界</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解决当下问题    </span></span><br><span class=\"line\">        dfs(step+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dfs之数的全排列\"><a href=\"#dfs之数的全排列\" class=\"headerlink\" title=\"dfs之数的全排列\"></a>dfs之数的全排列</h2><h3 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个正整数n(n&lt;10),写出1~n的全排列</p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>利用dfs基本模型来逐步解决</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">10</span>]=&#123;<span class=\"number\">0</span>&#125;,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(step&gt;=n+<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a[i]);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(book[i]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[m]=i;</span><br><span class=\"line\">            book[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(step+<span class=\"number\">1</span>);</span><br><span class=\"line\">            book[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"dfs之迷宫搜索\"><a href=\"#dfs之迷宫搜索\" class=\"headerlink\" title=\"dfs之迷宫搜索\"></a>dfs之迷宫搜索</h2><h3 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h3><p>给定一个n行m列迷宫，要求从寻找从起点到终点的最短路径</p>\n<h3 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>直接使用dfs搜索找出最短路径</p>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> startX,startY,endX,endY,min=<span class=\"number\">99999</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=&#123;<span class=\"number\">0</span>&#125;,book[<span class=\"number\">51</span>][<span class=\"number\">51</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x==endX&amp;&amp;y==endY)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(step&lt;min) min=step;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> next[<span class=\"number\">4</span>][<span class=\"number\">2</span>]=&#123;</span><br><span class=\"line\">        &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">-1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tx,ty;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tx=x+next[i][<span class=\"number\">0</span>];</span><br><span class=\"line\">        ty=y+next[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(tx&lt;<span class=\"number\">1</span>||ty&lt;<span class=\"number\">1</span>||tx&gt;n||ty&gt;m)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[tx][ty]==<span class=\"number\">0</span>&amp;&amp;book[tx][ty]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            book[tx][ty]=<span class=\"number\">1</span>;</span><br><span class=\"line\">            dfs(tx,ty,step+<span class=\"number\">1</span>);</span><br><span class=\"line\">            book[tx][ty]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>,&amp;startX,&amp;startY,&amp;endX,&amp;endY);</span><br><span class=\"line\">    book[startX][startY]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    dfs(startX,startY,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%d&quot;</span>,<span class=\"string\">&quot;最少步数为：&quot;</span>,min);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习经验",
                "DFS"
            ]
        },
        {
            "id": "http://yoursite.com/2020/09/01/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE/",
            "url": "http://yoursite.com/2020/09/01/%E6%9A%B4%E5%8A%9B%E6%9E%9A%E4%B8%BE/",
            "title": "暴力枚举",
            "date_published": "2020-09-01T10:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=7> 暴力枚举学习 </font></center>\n\n<a id=\"more\"></a>\n<h1 id=\"火柴棍游戏\"><a href=\"#火柴棍游戏\" class=\"headerlink\" title=\"火柴棍游戏\"></a>火柴棍游戏</h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;给定确定的n(n&lt;=24)根火柴，要求全部使用并摆出A+B=C的等式，其中A,B,C均为整数，求问共有多少种摆法。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;将0-9这10个数字所需要的火柴棍个数记录在数组当中，通过暴力枚举来找出其中符合的个数。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[<span class=\"number\">10</span>]=&#123;<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">fn</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">1000</span>) <span class=\"keyword\">return</span> f[(x/<span class=\"number\">1000</span>)]+f[x/<span class=\"number\">100</span>%<span class=\"number\">10</span>]+f[x/<span class=\"number\">10</span>%<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">100</span>&amp;&amp;x&lt;<span class=\"number\">1000</span>) <span class=\"keyword\">return</span> f[x/<span class=\"number\">100</span>]+f[x/<span class=\"number\">10</span>%<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">10</span>&amp;&amp;x&lt;<span class=\"number\">100</span>) <span class=\"keyword\">return</span> f[x/<span class=\"number\">10</span>]+f[x%<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> f[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,<span class=\"built_in\">abs</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=<span class=\"number\">1111</span>;i++)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">1111</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fn(i)+fn(j)+fn(i+j)==n<span class=\"number\">-4</span>) <span class=\"built_in\">abs</span>++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s%d%s&quot;</span>,<span class=\"string\">&quot;情况共有&quot;</span>,<span class=\"built_in\">abs</span>,<span class=\"string\">&quot;种&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习经验",
                "暴力枚举"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/30/%E9%93%BE%E8%A1%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "url": "http://yoursite.com/2020/08/30/%E9%93%BE%E8%A1%A8%E5%AD%A6%E4%B9%A0(%E4%B8%80)/",
            "title": "链表学习(一)",
            "date_published": "2020-08-30T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> 链表学习(一) </font></center>\n\n<a id=\"more\"></a>\n\n<h2 id=\"链表结构\"><a href=\"#链表结构\" class=\"headerlink\" title=\"链表结构\"></a>链表结构</h2><p>1.创建结构体</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.建立链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">head</span>,*<span class=\"title\">p</span>,*<span class=\"title\">q</span>;</span></span><br><span class=\"line\">head=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,x))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">    p-&gt;data=x;</span><br><span class=\"line\">    p-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head==<span class=\"literal\">NULL</span>) head=p;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> q-&gt;next=p;</span><br><span class=\"line\">    q=p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.输出链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">t</span>;</span></span><br><span class=\"line\">t=head;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(t!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,t-&gt;data);</span><br><span class=\"line\">    t=t-&gt;next;</span><br><span class=\"line\">&#125;        </span><br></pre></td></tr></table></figure>\n<p>4.插入链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">r</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(r!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r-&gt;next==<span class=\"literal\">NULL</span>||r-&gt;data&gt;a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=(struct node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct node));</span><br><span class=\"line\">        p-&gt;next=r-&gt;next;</span><br><span class=\"line\">        p-&gt;data=a;</span><br><span class=\"line\">        r-&gt;next=p;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r=r-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.删除链表</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">f</span>;</span></span><br><span class=\"line\">f=head;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(f!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(f);</span><br><span class=\"line\">    f=f-&gt;next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"模拟链表\"><a href=\"#模拟链表\" class=\"headerlink\" title=\"模拟链表\"></a>模拟链表</h2><p>&emsp;模拟链表，即通过2个数组来模拟动态链表，一个数组存放数据，另一个数组记录数据的位置。<br>1.模拟链表结构</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> data[<span class=\"number\">100</span>],right[<span class=\"number\">100</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;data[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i!=n) right[i]=i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> right[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>2.插入数据操作</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\"><span class=\"keyword\">int</span> t=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(t!=<span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(data[right[t]&gt;data[n])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        data[n+<span class=\"number\">1</span>]=x;</span><br><span class=\"line\">        right[t]=n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        right[n+<span class=\"number\">1</span>]=t+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t=right[t];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "学习经验",
                "数据结构"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/27/%E5%88%9D%E8%AF%86%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/",
            "url": "http://yoursite.com/2020/08/27/%E5%88%9D%E8%AF%86%E9%98%9F%E5%88%97%E5%92%8C%E6%A0%88/",
            "title": "初识队列和栈",
            "date_published": "2020-08-27T10:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=10> 初识队列和栈 </font></center>\n\n<a id=\"more\"></a>\n<h1 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h1><p>&emsp;<font size=3>队列，作为一种比较简单的数据结构，其在算法中有着非常多的应用。其类似于一条单行道，先进先出，后进后出，每次需要记录头指针和尾指针。接下来我将从一个简单的例子出发渗透队列的思想。</p>\n<h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;n 个人围成一圈，从第一个人开始报数,数到m的人出列，再由下一个人重新从1开始报数，数到m的人再出圈，依次类推，直到所有的人都出圈，输出依次出圈人的编号。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;构建一个含有n个元素的队列，进行n次循环，在每次循环中将队列前m-1个元素依次放置队尾，然后将第m个元素出队并输出，这样每次循环之后形成新的队列重复以上操作即可。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">1000005</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">1</span>,tail=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a[++tail]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tail&gt;=head)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            a[++tail]=a[head++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,a[head++]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p>&emsp;栈，原理类似于队列，如同一个死胡同，出口和入口为同一个，先进后出，每次只需记录尾指针即可。话不多说，再看一个小例子来了解栈的应用。</p>\n<h2 id=\"题目大意-1\"><a href=\"#题目大意-1\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;判断一个数是否为回文数</p>\n<h2 id=\"解题思路-1\"><a href=\"#解题思路-1\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;直接利用栈存储前一半的字符串，然后将后一半字符串与栈中字符对比判断即可</p>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">char</span> t[<span class=\"number\">10005</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> a[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> dg=<span class=\"number\">0</span>;</span><br><span class=\"line\">    gets(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len=<span class=\"built_in\">strlen</span>(a);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=len/<span class=\"number\">2</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=mid;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t[++top]=a[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;len;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[top--]!=a[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dg=<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">             &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=mid+<span class=\"number\">2</span>;i&lt;len;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(t[top--]!=a[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dg=<span class=\"number\">1</span>;<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dg) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;不是回文数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;是回文数&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"混合运用\"><a href=\"#混合运用\" class=\"headerlink\" title=\"混合运用\"></a>混合运用</h1><p>&emsp;接下来就轮到队列和栈的混合双打了,没错，就是传说中的经典纸牌游戏</p>\n<h2 id=\"题目大意-2\"><a href=\"#题目大意-2\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>&emsp;双方按照发牌的原本顺序轮流出牌放置桌面，出牌时，若一方打出的牌与桌面上某张牌相同，则可取走这两张牌之间的所有牌（包括这两张）依次放置牌的最后，当一方牌全出完时则失败，</p>\n<h2 id=\"解题思路-2\"><a href=\"#解题思路-2\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;开始时双方手中的牌可用队列存储，出牌即使出队，赢牌则是入队。而桌面上的牌则可用栈存储，每打出一张牌即入栈。最后判断队列是否为空即可。</p>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data[<span class=\"number\">1000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tail;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> data[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">queue</span> <span class=\"title\">q1</span>, <span class=\"title\">q2</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stack</span> <span class=\"title\">s</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> book[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, t;</span><br><span class=\"line\">    q1.head = <span class=\"number\">1</span>; q1.tail = <span class=\"number\">1</span>;</span><br><span class=\"line\">    q2.head = <span class=\"number\">1</span>; q2.tail = <span class=\"number\">1</span>;</span><br><span class=\"line\">    s.top = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">9</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        book[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf_s(<span class=\"string\">&quot;%d&quot;</span>, &amp;q1.data[q1.tail]);</span><br><span class=\"line\">        q1.tail++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf_s(<span class=\"string\">&quot;%d&quot;</span>, &amp;q2.data[q2.tail]);</span><br><span class=\"line\">        q2.tail++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q1.head &lt; q1.tail &amp;&amp; q2.head &lt; q2.tail)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t = q1.data[q1.head];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (book[t] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q1.head++;</span><br><span class=\"line\">            s.top++;</span><br><span class=\"line\">            s.data[s.top] = t;</span><br><span class=\"line\">            book[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q1.head++;</span><br><span class=\"line\">            q1.data[q1.tail] = t;</span><br><span class=\"line\">            q1.tail++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s.data[s.top] != t)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                q1.data[q1.tail] = s.data[s.top];</span><br><span class=\"line\">                q1.tail++;</span><br><span class=\"line\">                s.top--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            q1.data[q1.tail] = s.data[s.top];</span><br><span class=\"line\">            q1.tail++;</span><br><span class=\"line\">            s.top--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q1.head == q1.tail) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        t= q2.data[q2.head];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (book[t] == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q2.head++;</span><br><span class=\"line\">            s.top++;</span><br><span class=\"line\">            s.data[s.top] = t;</span><br><span class=\"line\">            book[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            q2.head++;</span><br><span class=\"line\">            q2.data[q2.tail] = t;</span><br><span class=\"line\">            q2.tail++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s.data[s.top] != t)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">                q2.data[q2.tail] = s.data[s.top];</span><br><span class=\"line\">                q2.tail++;</span><br><span class=\"line\">                s.top--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            book[s.data[s.top]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            q2.data[q2.tail] = s.data[s.top];</span><br><span class=\"line\">            q2.tail++;</span><br><span class=\"line\">            s.top--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q2.head == q2.tail) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (q1.head == q1.tail) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;B WIN&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;A WIN&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</font>\n\n<br/>\n\n",
            "tags": [
                "blog",
                "学习经验",
                "数据结构"
            ]
        },
        {
            "id": "http://yoursite.com/2020/08/13/%E8%90%8C%E6%96%B0%E6%9D%A5%E4%BA%86/",
            "url": "http://yoursite.com/2020/08/13/%E8%90%8C%E6%96%B0%E6%9D%A5%E4%BA%86/",
            "title": "萌新报道",
            "date_published": "2020-08-13T02:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=20> 萌新来报道力 </font></center>\n\n<a id=\"more\"></a>\n\n<p>&emsp;<font size=3>入坑计算机领域已经一年有余，终于创建了第一个自己的博客了。在这个博客中，我将分享自己学习的心路历程，知识经验等等，不断总结，不断进步。登高山务攻绝顶，赏大雪莫畏严寒！！！</font></p>\n<br/>\n\n<div align=center><img src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2062307482,1942308797&fm=26&gp=0.jpg\" width=600></div>\n\n",
            "tags": [
                "blog",
                "心路历程",
                "ONE"
            ]
        }
    ]
}