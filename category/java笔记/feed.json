{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sunyuzero-Blog • All posts by \"java笔记\" category",
    "description": "",
    "home_page_url": "http://yoursite.com",
    "items": [
        {
            "id": "http://yoursite.com/2020/10/05/java%E5%AD%A6%E4%B9%A0(%E5%9B%9B)/",
            "url": "http://yoursite.com/2020/10/05/java%E5%AD%A6%E4%B9%A0(%E5%9B%9B)/",
            "title": "java学习(四)",
            "date_published": "2020-10-05T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java </font></center>\n\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><p>定义一个数组类型的变量，使用数组类型“类型[]”，有以下几种创建方法:</p>\n<ul>\n<li>int[] a={1,2,3,4,5};    //根据{}之间的元素个数自动创建</li>\n<li>int[] a=new int{1,2,3,4,5}  //同上</li>\n<li>int[] a=new int[5];a={1,2,3,4,5};    //先创建容量为5的数组，再赋值</li>\n</ul>\n<h2 id=\"数组的内存\"><a href=\"#数组的内存\" class=\"headerlink\" title=\"数组的内存\"></a>数组的内存</h2><p>1.当动态创建一个数组时，系统将会在栈区先写入数组名称，然后在堆区开辟空间存放数组元素，其中数组的索引也是存放在栈区的，当你要修改数组元素的值时，你首先将访问栈区的索引，然后这个索引再指向堆区对应的内存，如下图所示:</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java7.png\" width=600></div>\n\n<p>2.当一个数组赋值给另一个数组时：int[] arrayB = arrayA;这时候是将arrayA的地址直接赋值给arrayB了，此时arrayA和arrayB共用一个内存，本质上时同一个数组，其内存分配如下所示：</p>\n<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java8.png\" width=600></div>\n\n<h2 id=\"数组注意事项：\"><a href=\"#数组注意事项：\" class=\"headerlink\" title=\"数组注意事项：\"></a>数组注意事项：</h2><ul>\n<li>数组所有元素初始化为默认值，整型都是0，浮点型是0.0，布尔型是false；</li>\n<li>要访问数组中的某一个元素，需要使用索引。数组索引从0开始</li>\n<li>可以修改数组中的某一个元素，使用赋值语句</li>\n<li>可以用数组变量.length获取数组大小</li>\n<li>数组是引用类型，在使用索引访问数组元素时，如果索引超出范围，运行时将报错</li>\n<li>直接输出数组名称将会得到数组的首地址</li>\n<li>数组的2个异常：超出数组索引(ArrayIndexOutOfBoundsException),空指针异常(NullPointerException):创建一个空数组时访问数组元素将会出现空指针异常</li>\n</ul>\n<h2 id=\"数组的遍历使用\"><a href=\"#数组的遍历使用\" class=\"headerlink\" title=\"数组的遍历使用\"></a>数组的遍历使用</h2><p>1.简单遍历输出<br>由于java提供了获取数组长度的方法（array.length），所以对于数组的遍历非常方便：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;array.length;i++) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(array[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.查找数组最大值<br>以最大值为例，只需要用一个变量记录首元素，在遍历数组时，每次比较得出最大值更新这个变量即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[] array=&#123;<span class=\"number\">6</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> max=array[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;array.length;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(max&lt;array[i]) max=array[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;最大值为：&quot;</span>+max);</span><br></pre></td></tr></table></figure>",
            "tags": [
                "blog",
                "java学习"
            ]
        },
        {
            "id": "http://yoursite.com/2020/10/04/java%E5%AD%A6%E4%B9%A0(%E4%B8%89)/",
            "url": "http://yoursite.com/2020/10/04/java%E5%AD%A6%E4%B9%A0(%E4%B8%89)/",
            "title": "java学习(三)",
            "date_published": "2020-10-04T05:45:43.000Z",
            "content_html": "<center><font face=\"黑体\" size=8> java用法 </font></center>\n\n<h1 id=\"java编译器的一些优化\"><a href=\"#java编译器的一些优化\" class=\"headerlink\" title=\"java编译器的一些优化\"></a>java编译器的一些优化</h1><ul>\n<li>对于byte，short，char三种类型，如果右侧赋值的数据大小没有超过范围，那么java编译器会自动加上（byte），（short），（char），例如：<br>byte a = 30 &lt;==&gt; byte a = (byte) 30</li>\n<li>但是，当右侧赋值的数据大小超过范围后，java编译器则会直接报错</li>\n<li>java中的加法默认将加数当作int数据类型，所以使用2个short类型的变量相加赋予另一个short类型时，编译器会报错，但是当short类型的右边赋予的是两个常量相加，那么编译器不会报错，而是会直接先将常量相加直接赋予short：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">short</span> a=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> b=<span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> c=a+b;   <span class=\"comment\">//会报错</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> c=<span class=\"number\">10</span>+<span class=\"number\">20</span>;  <span class=\"comment\">//正确</span></span><br></pre></td></tr></table></figure>\n报错原因：<div align=center><img src=\"https://cdn.jsdelivr.net/gh/sunyuzero/cdn/java/java5.png\" width=600></div>\n\n</li>\n</ul>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"方法的注意事项\"><a href=\"#方法的注意事项\" class=\"headerlink\" title=\"方法的注意事项\"></a>方法的注意事项</h2><ul>\n<li>方法必须定义在类中，且不能在方法中再定义方法</li>\n<li>方法定义的前后顺序无所谓</li>\n<li>如果方法有返回值，那么必须加上return返回值，不能没有</li>\n<li>对于void方法，不能return加返回值，只能直接return；</li>\n<li>一个方法可以有多个return语句，但是必须保证能执行的只有一个 </li>\n</ul>\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法，这种方法名相同，但各自的参数不同，称为方法重载（Overload），方法重载的目的是，功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。<br>例如，String类提供了多个重载方法indexOf()，可以查找子串：</p>\n<ul>\n<li>int indexOf(int ch)：根据字符的Unicode码查找；</li>\n<li>int indexOf(String str)：根据字符串查找；</li>\n<li>int indexOf(int ch, int fromIndex)：根据字符查找，但指定起始位置；</li>\n<li>int indexOf(String str, int fromIndex)根据字符串查找，但指定起始位置。</li>\n</ul>\n<h3 id=\"重载的注意事项\"><a href=\"#重载的注意事项\" class=\"headerlink\" title=\"重载的注意事项\"></a>重载的注意事项</h3><p>1.方法的重载与下列因素相关：</p>\n<ul>\n<li>参数的个数不同</li>\n<li>参数的类型不同</li>\n<li>参数的多类型顺序不同</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">double</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\">puclic <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">double</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上正确，都能构成重载</span></span><br></pre></td></tr></table></figure>\n\n<p>2.方法的重载与下列因素无关：</p>\n<ul>\n<li>与参数的名称无关</li>\n<li>与方法的返回值类型无关</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sun</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上不能构成重载会报错，因为与方法参数的名称无关</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//以上也不能构成重载会报错，因为与方法的返回类型无关</span></span><br></pre></td></tr></table></figure>\n\n\n",
            "tags": [
                "blog",
                "java学习"
            ]
        }
    ]
}